import os
import sys
import threading
import webbrowser
from pathlib import Path
from contextlib import asynccontextmanager

from fastapi import Depends, FastAPI, Request, Response, status, Form
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
from starlette.middleware.sessions import SessionMiddleware
from starlette.exceptions import HTTPException as StarletteHTTPException
from fastapi.exception_handlers import http_exception_handler

from db import SessionLocal
from auth.utils import (
    auth_router, create_access_token, fake_users_db, hash_password, require_login, verify_password
)
from frontend.views import router as views_router
from admin import admin_router
from routes import __all__ as generated_routes

@asynccontextmanager
async def lifespan(app: FastAPI):
    from app.auth.utils import create_default_admin
    create_default_admin()
    yield

app = FastAPI(lifespan=lifespan)

# Middleware
app.add_middleware(SessionMiddleware, secret_key="SUPER_SECRET_DEV_KEY")
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.middleware("http")
async def db_session_middleware(request: Request, call_next):
    response = Response("Internal Server Error", status_code=500)
    try:
        request.state.db = SessionLocal()
        response = await call_next(request)
    finally:
        request.state.db.close()
    return response

def get_db(request: Request):
    return request.state.db

# Templates and static files
BASE_DIR = Path(__file__).resolve().parent
app.mount("/static", StaticFiles(directory=BASE_DIR / "static"), name="static")
templates = Jinja2Templates(directory=str(BASE_DIR / "templates"))

# Built-in routers
app.include_router(auth_router)
app.include_router(views_router)
app.include_router(admin_router)

# SDK-generated routers
for route_module in generated_routes:
    app.include_router(route_module.router)

@app.exception_handler(StarletteHTTPException)
async def custom_http_exception_handler(request: Request, exc: StarletteHTTPException):
    if exc.status_code == 307 and exc.detail == "Redirect to login":
        return RedirectResponse("/admin/login")
    return await http_exception_handler(request, exc)

@app.get("/health")
async def health_check():
    return {"status": "ok"}

@app.get("/", include_in_schema=False)
async def root():
    return RedirectResponse("/admin/login")

@app.get("/admin/register", response_class=HTMLResponse)
async def register_form(request: Request):
    return templates.TemplateResponse("admin/register.html", {"request": request})

@app.post("/admin/register", response_class=HTMLResponse)
async def register_user(request: Request):
    form = await request.form()
    username = form.get("username")
    password = form.get("password")

    if username in fake_users_db:
        return templates.TemplateResponse("admin/register.html", {
            "request": request, "error": "Username already exists"
        })

    if not isinstance(password, str):
        return templates.TemplateResponse("admin/register.html", {
            "request": request, "error": "Password is required and must be a string"
        })

    fake_users_db[username] = {"username": username, "hashed_password": hash_password(password)}
    return RedirectResponse("/admin/login", status_code=302)

@app.get("/admin/login", response_class=HTMLResponse)
async def login_form(request: Request):
    return templates.TemplateResponse("admin/login.html", {"request": request})

@app.post("/admin/login", response_class=HTMLResponse)
async def login_submit(request: Request):
    form = await request.form()
    username = form.get("username")
    password = form.get("password")
    user = fake_users_db.get(username)

    if not user or not isinstance(password, str) or not verify_password(password, user["hashed_password"]):
        return templates.TemplateResponse("admin/login.html", {
            "request": request, "error": "Invalid credentials"
        })

    token = create_access_token(data={"sub": username})
    response = RedirectResponse("/admin/dashboard", status_code=status.HTTP_302_FOUND)
    response.set_cookie("access_token", token, httponly=True, max_age=1800)
    return response

@app.get("/admin/logout")
async def logout():
    response = RedirectResponse("/admin/login")
    response.delete_cookie("access_token")
    return response

@app.get("/admin/dashboard", response_class=HTMLResponse)
async def dashboard(request: Request, user: str = Depends(require_login)):
    return templates.TemplateResponse("admin/dashboard.html", {"request": request, "user": user})

def open_browser():
    webbrowser.get("/mnt/c/Program Files/Mozilla Firefox/firefox.exe %s").open("http://localhost:8081")

if __name__ == "__main__":
    threading.Timer(1.25, open_browser).start()
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8081, reload=True)
