# generated by datamodel-codegen:
#   filename:  openapi_sdk.yaml

from __future__ import annotations

from decimal import Decimal
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class Matter(BaseModel):
    id: Optional[int] = None
    display_number: Optional[str] = None


class AccountBalanceBase(BaseModel):
    balance: Optional[float] = Field(
        None,
        description="The current balance of the bank account available to the matter or contact",
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *AccountBalance*"
    )
    name: Optional[str] = Field(None, description="The name of the bank account")
    type: Optional[str] = Field(
        None, description="The bank account type. Either Operating or Trust"
    )


class AccountBase(BaseModel):
    created_at: Optional[str] = Field(
        None, description="The time the *Account* was created (as a ISO-8601 timestamp)"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Account*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Account*")
    name: Optional[str] = Field(None, description="The name of the *Account*")
    state: Optional[str] = Field(None, description="Account state")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Account* was last updated (as a ISO-8601 timestamp)",
    )


class Hierarchy(Enum):
    """
    What rate hierarchy the rate belongs to.
    """

    Default = "Default"
    Activity = "Activity"
    Matter = "Matter"
    Client = "Client"


class Type(Enum):
    """
    What kind of rate it is.
    """

    User = "User"
    FlatRate = "FlatRate"
    Custom = "Custom"


class ActivityDescriptionRateBase(BaseModel):
    amount: Optional[float] = Field(
        None,
        description="Monetary value of this rate. Either hourly value or flat rate value",
    )
    hierarchy: Optional[Hierarchy] = Field(
        None, description="What rate hierarchy the rate belongs to."
    )
    non_billable_amount: Optional[float] = Field(
        None,
        description="Monetary value of this rate for non billable activities. Either hourly value or flat rate value",
    )
    type: Optional[Type] = Field(None, description="What kind of rate it is.")


class ActivityDescriptionBase(BaseModel):
    accessible_to_user: Optional[bool] = Field(
        None, description="Determines if activity description is accessible to user"
    )
    category_type: Optional[str] = Field(
        None, description="Activity category rate type. Either hourly or flat fee"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *ActivityDescription* was created (as a ISO-8601 timestamp)",
    )
    default: Optional[bool] = Field(
        None, description="Whether it is the user's default activity description"
    )
    etag: Optional[str] = Field(None, description="ETag for the *ActivityDescription*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *ActivityDescription*"
    )
    name: Optional[str] = Field(
        None, description="The name of the *ActivityDescription*"
    )
    type: Optional[str] = Field(
        None, description="The type of the *ActivityDescription*"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *ActivityDescription* was last updated (as a ISO-8601 timestamp)",
    )
    utbms_activity_id: Optional[int] = Field(
        None,
        description="The UTBMS activity id if the *ActivityDescription* is a UTBMS activity description",
    )
    utbms_task_id: Optional[int] = Field(
        None,
        description="The UTBMS activity task id if attached to a UTBMS activity description",
    )
    utbms_task_name: Optional[str] = Field(
        None,
        description="The UTBMS activity task name if attached to a UTBMS activity description",
    )
    visible_to_co_counsel: Optional[bool] = Field(
        None,
        description="A toggle that determines if a co-counsel user of the firm can have access to this activity description",
    )
    xero_service_code: Optional[str] = Field(
        None, description="Custom Xero service code for this activity description"
    )


class ActivityRateBase(BaseModel):
    co_counsel_contact_id: Optional[int] = Field(
        None, description="Filter ActivityRate records for the co-counsel."
    )
    contact_id: Optional[int] = Field(
        None, description="Filter ActivityRate records for the contact."
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *ActivityRate* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *ActivityRate*")
    flat_rate: Optional[bool] = Field(None, description="Whether this is a flat rate")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *ActivityRate*"
    )
    rate: Optional[float] = Field(
        None,
        description="Monetary value of this rate. Either hourly value or flat rate value",
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *ActivityRate* was last updated (as a ISO-8601 timestamp)",
    )


class ActivityCalendarEntryBase(BaseModel):
    calendar_owner_id: Optional[int] = Field(
        None, description="The id of the calendar owner."
    )
    etag: Optional[str] = Field(None, description="ETag for the *CalendarEntry*")
    id: Optional[str] = Field(
        None, description="Unique identifier for the *CalendarEntry*"
    )


class ActivityTaskBase(BaseModel):
    etag: Optional[str] = Field(None, description="ETag for the *Task*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Task*")


class ActivityTextMessageConversationBase(BaseModel):
    etag: Optional[str] = Field(
        None, description="ETag for the *TextMessageConversation*"
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *TextMessageConversation*"
    )


class TaxSetting(Enum):
    """
    The option denoting whether primary tax, secondary tax, or both is applied to an expense entry.
    """

    no_tax = "no_tax"
    tax_1_only = "tax_1_only"
    tax_2_only = "tax_2_only"
    tax_1_and_tax_2 = "tax_1_and_tax_2"


class Type1(Enum):
    """
    The type of the *Activity*
    """

    TimeEntry = "TimeEntry"
    ExpenseEntry = "ExpenseEntry"
    HardCostEntry = "HardCostEntry"
    SoftCostEntry = "SoftCostEntry"


class ActivityBase(BaseModel):
    billed: Optional[bool] = Field(
        None,
        description="Whether the *Activity* has been added to an active bill that is in the state of `awaiting_payment` or `paid`",
    )
    contingency_fee: Optional[bool] = Field(
        None, description="Whether or not the *Activity* is a contingency fee"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *Activity* was created (as a ISO-8601 timestamp)",
    )
    date: Optional[str] = Field(
        None, description="The date the *Activity* was performed (as a ISO-8601 date)"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Activity*")
    flat_rate: Optional[bool] = Field(
        None, description="Whether the *Activity* is a flat rate"
    )
    id: Optional[int] = Field(None, description="Unique identifier for the *Activity*")
    no_charge: Optional[bool] = Field(
        None, description="Whether the non-billable *Activity* is shown on the bill."
    )
    non_billable: Optional[bool] = Field(
        None, description="Whether the *Activity* is non-billable"
    )
    non_billable_total: Optional[float] = Field(
        None, description="The total cost of non-billable items in the *Activity*"
    )
    note: Optional[str] = Field(None, description="The details about the *Activity*")
    on_bill: Optional[bool] = Field(
        None,
        description="Whether the *Activity* has been added to an active bill that is in the state of `draft`, `awaiting_approval`, `awaiting_payment` or `paid`",
    )
    price: Optional[float] = Field(
        None, description="The hourly or flat rate of the *Activity*"
    )
    quantity: Optional[float] = Field(
        None,
        description="The field is applicable to TimeEntry, ExpenseEntry, and SoftCostEntry.\n\n**Version <= 4.0.3:**\nThe number of hours the TimeEntry took.\n\n**Latest version:**\nThe number of seconds the TimeEntry took.\n",
    )
    quantity_in_hours: Optional[float] = Field(
        None, description="The number of hours the TimeEntry took."
    )
    quantity_redacted: Optional[bool] = Field(
        None,
        description="Is `true` if any of the following fields are redacted:\n`quantity`, `rounded_quantity`, `rounded_quantity_in_hours`, `quantity_in_hours`, `total`, `non_billable_total`\n",
    )
    reference: Optional[str] = Field(
        None, description="A check reference for a HardCostEntry."
    )
    rounded_quantity: Optional[float] = Field(
        None,
        description="The field is applicable to time entries only.\n\n**Version <= 4.0.3:**\nThe number of hours rounded accordingly to the billing settings.\nThe rounded value is used to calculate the total.\n\n**Latest version:**\nThe number of seconds rounded accordingly to the billing settings.\nThe rounded value is used to calculate the total.\n",
    )
    rounded_quantity_in_hours: Optional[float] = Field(
        None,
        description="The number of hours rounded accordingly to the billing settings.\nThe rounded value is used to calculate the total.\n",
    )
    tax_setting: Optional[TaxSetting] = Field(
        None,
        description="The option denoting whether primary tax, secondary tax, or both is applied to an expense entry.",
    )
    total: Optional[float] = Field(
        None,
        description="The total cost of draft, billable and billed items in the *Activity*",
    )
    type: Optional[Type1] = Field(None, description="The type of the *Activity*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Activity* was last updated (as a ISO-8601 timestamp)",
    )


class Name(Enum):
    """
    The name of the *Address*
    """

    Work = "Work"
    Home = "Home"
    Billing = "Billing"
    Other = "Other"


class AddressBase(BaseModel):
    city: Optional[str] = Field(None, description="City of the *Address*")
    country: Optional[str] = Field(None, description="Country of the *Address*")
    created_at: Optional[str] = Field(
        None, description="The time the *Address* was created (as a ISO-8601 timestamp)"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Address*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Address*")
    name: Optional[Name] = Field(None, description="The name of the *Address*")
    postal_code: Optional[str] = Field(None, description="Postal code of the *Address*")
    primary: Optional[bool] = Field(
        None, description="Whether it is the default for this contact"
    )
    province: Optional[str] = Field(
        None, description="Province or state of the *Address*"
    )
    street: Optional[str] = Field(None, description="Street of the *Address*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Address* was last updated (as a ISO-8601 timestamp)",
    )


class AllocationBase(BaseModel):
    amount: Optional[float] = Field(
        None, description="The total amount of money that the user has allocated"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *Allocation* was created (as a ISO-8601 timestamp)",
    )
    date: Optional[str] = Field(
        None, description="The date the allocation was applied (as a ISO-8601 date)"
    )
    description: Optional[str] = Field(
        None,
        description="The description from the associated Credit Memo (if applicable)",
    )
    destroyable: Optional[bool] = Field(
        None, description="Whether the record can be deleted or not"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Allocation*")
    has_online_payment: Optional[bool] = Field(
        None,
        description="Whether this allocation is associated with an online payment or not",
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *Allocation*"
    )
    interest: Optional[bool] = Field(
        None, description="Whether the allocation is applied to interest amount"
    )
    payment_type: Optional[str] = Field(
        None,
        description="A string indicating whether the payment is a card or an eCheck payment.",
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Allocation* was last updated (as a ISO-8601 timestamp)",
    )
    voided_at: Optional[str] = Field(
        None, description="Time the *Allocation* was voided (as a ISO-8601 timestamp)"
    )


class Type2(Enum):
    """
    The class name of the *Attendee*
    """

    Contact = "Contact"
    Calendar = "Calendar"


class AttendeeBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *Attendee* was created (as a ISO-8601 timestamp)",
    )
    email: Optional[str] = Field(
        None,
        description="If the Attendee is a User, this is the User's email. If the Attendee is a contact, this is the Contact's primary email address.",
    )
    enabled: Optional[bool] = Field(
        None,
        description="If the Attendee is a user, represents whether the user is enabled or disabled. Returns null if attendee is a Contact.",
    )
    etag: Optional[str] = Field(None, description="ETag for the *Attendee*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Attendee*")
    name: Optional[str] = Field(None, description="The name of the *Attendee*")
    type: Optional[Type2] = Field(None, description="The class name of the *Attendee*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Attendee* was last updated (as a ISO-8601 timestamp)",
    )


class AvatarBase(BaseModel):
    field_destroy: Optional[bool] = Field(
        None, alias="_destroy", description="Whether to destroy the *Avatar*"
    )
    created_at: Optional[str] = Field(
        None, description="The time the *Avatar* was created (as a ISO-8601 timestamp)"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Avatar*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Avatar*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Avatar* was last updated (as a ISO-8601 timestamp)",
    )
    url: Optional[str] = Field(None, description="The URL for the *Avatar*")


class Type3(Enum):
    """
    The type of Balance this data is for.
    """

    Matter = "Matter"
    Client = "Client"


class BalanceBase(BaseModel):
    amount: Optional[float] = Field(None, description="The amount for this Balance.")
    due: Optional[float] = Field(
        None,
        description="The amount due for this Balance, factoring in applicable discounts.",
    )
    id: Optional[int] = Field(None, description="Unique identifier for the *Balance*")
    interest_amount: Optional[float] = Field(
        None, description="The interest amount for this Balance."
    )
    type: Optional[Type3] = Field(
        None, description="The type of Balance this data is for."
    )


class Type4(Enum):
    """
    The type of the *BankAccount*
    """

    Operating = "Operating"
    Trust = "Trust"


class BankAccountBase(BaseModel):
    account_number: Optional[str] = Field(
        None, description="The account number for *BankAccount*"
    )
    balance: Optional[float] = Field(
        None, description="The current balance of the *BankAccount*"
    )
    bank_transactions_count: Optional[int] = Field(
        None, description="The number of bank transactions associated with the account."
    )
    clio_payment_page_link: Optional[str] = Field(
        None,
        description="Link to Single Payment Page which allows to transfer funds without logging in.",
    )
    clio_payment_page_qr_code: Optional[str] = Field(
        None,
        description="A QR code that links to a Single Payment Page which allows to transfer funds without logging in.",
    )
    clio_payments_enabled: Optional[bool] = Field(
        None, description="Whether the bank account is connected to Clio Payments"
    )
    controlled_account: Optional[bool] = Field(
        None, description="Whether is a controlled account"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *BankAccount* was created (as a ISO-8601 timestamp)",
    )
    currency: Optional[str] = Field(
        None, description="The currency type of the *BankAccount*"
    )
    default_account: Optional[bool] = Field(
        None, description="Whether it is the default account"
    )
    domicile_branch: Optional[str] = Field(
        None, description="The name of the branch where the account was opened"
    )
    etag: Optional[str] = Field(None, description="ETag for the *BankAccount*")
    general_ledger_number: Optional[str] = Field(
        None, description="General ledger number"
    )
    holder: Optional[str] = Field(
        None,
        description="The name of the person or business that owns the *BankAccount*",
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *BankAccount*"
    )
    institution: Optional[str] = Field(
        None,
        description="The financial institution where the *BankAccount* is registered",
    )
    name: Optional[str] = Field(None, description="The name of the *BankAccount*")
    swift: Optional[str] = Field(
        None, description="A unique identification code for the financial institution"
    )
    transit_number: Optional[str] = Field(
        None, description="Transit number for the bank account branch"
    )
    type: Optional[Type4] = Field(None, description="The type of the *BankAccount*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *BankAccount* was last updated (as a ISO-8601 timestamp)",
    )


class BankTransactionBase(BaseModel):
    amount: Optional[float] = Field(None, description="The amount of the transaction.")
    bank_account_id: Optional[int] = Field(
        None, description="The associated bank account."
    )
    clio_payments_transaction: Optional[bool] = Field(
        None, description="Whether the transaction was created through online payments."
    )
    confirmation: Optional[str] = Field(
        None, description="The reference code for the transaction."
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *BankTransaction* was created (as a ISO-8601 timestamp)",
    )
    currency: Optional[str] = Field(
        None, description="The currency of the transaction."
    )
    current_account_balance: Optional[float] = Field(
        None, description="The current account balance."
    )
    date: Optional[str] = Field(None, description="The date of the transaction.")
    description: Optional[str] = Field(
        None, description="The description of the transaction."
    )
    etag: Optional[str] = Field(None, description="ETag for the *BankTransaction*")
    exchange_rate: Optional[float] = Field(
        None, description="The exchange rate of the transaction."
    )
    funds_in: Optional[float] = Field(
        None, description="The amount of funds received in this transaction."
    )
    funds_out: Optional[float] = Field(
        None, description="The amount of funds withdrawn in this transaction."
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *BankTransaction*"
    )
    read_only_confirmation: Optional[bool] = Field(
        None, description="Whether the transaction's reference code is read-only."
    )
    source: Optional[str] = Field(None, description="Where the transaction came from.")
    transaction_type: Optional[str] = Field(
        None, description="What kind of transaction."
    )
    type: Optional[str] = Field(None, description="The type of the *BankTransaction*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *BankTransaction* was last updated (as a ISO-8601 timestamp)",
    )


class BankTransferBase(BaseModel):
    amount: Optional[float] = Field(None, description="The amount of the transfer.")
    created_at: Optional[str] = Field(
        None,
        description="The time the *BankTransfer* was created (as a ISO-8601 timestamp)",
    )
    date: Optional[str] = Field(None, description="The date of the transfer.")
    description: Optional[str] = Field(
        None, description="The description of the transfer."
    )
    etag: Optional[str] = Field(None, description="ETag for the *BankTransfer*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *BankTransfer*"
    )
    primary_authorizer: Optional[str] = Field(
        None, description="The primary authorizer of the transfer."
    )
    secondary_authorizer: Optional[str] = Field(
        None, description="The secondary authorizer of the transfer."
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *BankTransfer* was last updated (as a ISO-8601 timestamp)",
    )


class BillThemeBase(BaseModel):
    account_id: Optional[int] = Field(
        None, description="The account number the *BillTheme* belongs to"
    )
    config: Optional[str] = Field(
        None, description="The configuration of the *BillTheme*"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *BillTheme* was created (as a ISO-8601 timestamp)",
    )
    default: Optional[bool] = Field(
        None, description="Whether the *BillTheme* is the default for its account"
    )
    etag: Optional[str] = Field(None, description="ETag for the *BillTheme*")
    id: Optional[int] = Field(None, description="Unique identifier for the *BillTheme*")
    name: Optional[str] = Field(None, description="The name of the *BillTheme*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *BillTheme* was last updated (as a ISO-8601 timestamp)",
    )


class AvailableStateTransitions(Enum):
    """
    The available *Bill* state transitions.
    """

    awaiting_approval = "awaiting_approval"
    awaiting_payment = "awaiting_payment"
    paid = "paid"
    void = "void"
    deleted = "deleted"


class Kind(Enum):
    """
    The kind of the *Bill*
    """

    revenue_kind = "revenue_kind"
    summary_kind = "summary_kind"
    trust_kind = "trust_kind"
    aggregate_all = "aggregate_all"
    aggregate_split = "aggregate_split"
    aggregate_services = "aggregate_services"
    aggregate_expenses = "aggregate_expenses"


class State(Enum):
    """
    The billing state the *Bill* is in
    """

    draft = "draft"
    awaiting_approval = "awaiting_approval"
    awaiting_payment = "awaiting_payment"
    paid = "paid"
    void = "void"
    deleted = "deleted"


class Type5(Enum):
    """
    The type of the *Bill*
    """

    MatterBill = "MatterBill"
    ClientBill = "ClientBill"


class BillBase(BaseModel):
    available_state_transitions: Optional[AvailableStateTransitions] = Field(
        None, description="The available *Bill* state transitions."
    )
    balance: Optional[float] = Field(
        None, description="The outstanding balance of the *Bill*"
    )
    can_update: Optional[bool] = Field(
        None,
        description="This value indicates if your *Bill*'s line items and information can be updated.",
    )
    created_at: Optional[str] = Field(
        None, description="The time the *Bill* was created (as a ISO-8601 timestamp)"
    )
    credits_issued: Optional[float] = Field(
        None, description="The total credits issued for the *Bill*"
    )
    discount_services_only: Optional[str] = Field(
        None, description="The selected discount is applied to services only."
    )
    due: Optional[float] = Field(
        None,
        description="The total amount of the *Bill* with interest and less discounts",
    )
    due_at: Optional[str] = Field(
        None, description="The date the *Bill* is due (as a ISO-8601 date)"
    )
    end_at: Optional[str] = Field(
        None, description="The time the billing period ends (as a ISO-8601 date)"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Bill*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Bill*")
    issued_at: Optional[str] = Field(
        None, description="The time the *Bill* was issued (as a ISO-8601 date)"
    )
    kind: Optional[Kind] = Field(None, description="The kind of the *Bill*")
    last_sent_at: Optional[str] = Field(
        None, description="The last time the *Bill* was sent (as a ISO-8601 date)"
    )
    memo: Optional[str] = Field(None, description="A memo for the *Bill*")
    number: Optional[str] = Field(
        None, description="The *Bill* identifier (not necessarily numeric)'"
    )
    paid: Optional[float] = Field(
        None, description="The total amount paid for the *Bill*"
    )
    paid_at: Optional[str] = Field(
        None, description="The date of the last payment on the *Bill*"
    )
    pending: Optional[float] = Field(
        None, description="The amount of pending credit card payments on the *Bill*"
    )
    purchase_order: Optional[str] = Field(
        None, description="The purchase order of the *Bill*"
    )
    secondary_tax_rate: Optional[float] = Field(
        None, description="A secondary tax rate applied to the *Bill*"
    )
    secondary_tax_sum: Optional[float] = Field(
        None, description="Sum of secondary tax for the model"
    )
    secondary_taxable_sub_total: Optional[int] = Field(
        None, description="The subtotal of the bill's secondary tax"
    )
    services_secondary_tax: Optional[float] = Field(
        None,
        description="The total secondary tax of the bill's line items of a service kind",
    )
    services_secondary_taxable_sub_total: Optional[int] = Field(
        None, description="The services portion of the bill's secondary tax"
    )
    services_sub_total: Optional[float] = Field(
        None, description="The sub total of all the bill's line items of a service kind"
    )
    services_tax: Optional[float] = Field(
        None, description="The total tax of the bill's line items of a service kind"
    )
    services_taxable_sub_total: Optional[int] = Field(
        None, description="The services portion of the bill's primary tax"
    )
    shared: Optional[bool] = Field(None, description="Whether the *Bill* is a shared")
    start_at: Optional[str] = Field(
        None, description="The time the billing period starts (as a ISO-8601 date)"
    )
    state: Optional[State] = Field(
        None, description="The billing state the *Bill* is in"
    )
    sub_total: Optional[float] = Field(None, description="Sub total for the *Bill*")
    subject: Optional[str] = Field(None, description="The subject of the *Bill*")
    tax_rate: Optional[float] = Field(None, description="The tax rate to the *Bill*")
    tax_sum: Optional[float] = Field(
        None, description="Sum of primary tax for the model"
    )
    taxable_sub_total: Optional[int] = Field(
        None, description="The total taxable bill amount"
    )
    total: Optional[float] = Field(
        None, description="The total with interest of the *Bill*"
    )
    total_tax: Optional[float] = Field(
        None, description="The total amount of tax for the bill."
    )
    type: Optional[Type5] = Field(None, description="The type of the *Bill*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Bill* was last updated (as a ISO-8601 timestamp)",
    )


class BillableClientBase(BaseModel):
    amount_in_trust: Optional[float] = Field(
        None, description="The trust amount available for the client"
    )
    billable_matters_count: Optional[int] = Field(
        None, description="The total number of billable matters the client has"
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *BillableClient*"
    )
    name: Optional[str] = Field(None, description="The name of the Client")
    unbilled_amount: Optional[float] = Field(
        None, description="The unbilled amount of the client"
    )
    unbilled_hours: Optional[float] = Field(
        None, description="The unbilled hours of  the client"
    )


class BillableMatterBase(BaseModel):
    amount_in_trust: Optional[float] = Field(
        None, description="The trust amount available for the matter"
    )
    display_number: Optional[str] = Field(
        None, description="The reference to the matter"
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *BillableMatter*"
    )
    unbilled_amount: Optional[float] = Field(
        None, description="The unbilled amount for the matter"
    )
    unbilled_hours: Optional[float] = Field(
        None, description="The unbilled number of hours for the matter"
    )


class SecondaryTaxRule(Enum):
    """
    Used to determine if secondary tax should be applied separately or additionally to primary tax
    """

    Pre = "Pre"
    Post = "Post"


class BillingSettingBase(BaseModel):
    apply_tax_by_default: Optional[bool] = Field(
        None,
        description="Used to determine if primary tax should be applied to invoices by default",
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *BillingSetting* was created (as a ISO-8601 timestamp)",
    )
    currency: Optional[str] = Field(
        None, description="Current user setting of currency"
    )
    currency_sign: Optional[str] = Field(
        None, description="The sign of the current currency"
    )
    etag: Optional[str] = Field(None, description="ETag for the *BillingSetting*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *BillingSetting*"
    )
    notify_after_bill_created: Optional[bool] = Field(
        None,
        description="Flag to indicate if users should have the option to notify other users when generating a bill",
    )
    rounded_duration: Optional[float] = Field(
        None, description="Rounded equivalent of duration submitted"
    )
    rounding: Optional[int] = Field(
        None, description="Minute increment for time rounding"
    )
    secondary_tax_name: Optional[str] = Field(
        None,
        description="Name shown for secondary tax on invoices using this BillingSetting",
    )
    secondary_tax_rate: Optional[float] = Field(
        None,
        description="Rate applied for secondary tax on invoices using this BillingSetting",
    )
    secondary_tax_rule: Optional[SecondaryTaxRule] = Field(
        None,
        description="Used to determine if secondary tax should be applied separately or additionally to primary tax",
    )
    tax_name: Optional[str] = Field(
        None,
        description="Name shown for primary tax on invoices using this BillingSetting",
    )
    tax_rate: Optional[float] = Field(
        None,
        description="Rate applied for primary tax on invoices using this BillingSetting",
    )
    time_on_flat_rate_contingency_matters_is_non_billable: Optional[bool] = Field(
        None,
        description="Used to determine if hourly time entries on flat rate or contingency fee matters should be non-billable by default",
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *BillingSetting* was last updated (as a ISO-8601 timestamp)",
    )
    use_decimal_rounding: Optional[bool] = Field(
        None, description="Round time to two decimal places"
    )
    use_secondary_tax: Optional[bool] = Field(
        None,
        description="Used to determine if secondary tax applies to invoices using this BillingSetting",
    )
    use_utbms_codes: Optional[bool] = Field(
        None,
        description="Controls usage of UTBMS codes, allowing creation of coded time entries and expenses",
    )


class Color(Enum):
    """
    The color describing the *CalendarEntryEventType*
    """

    field_367B9C = "#367B9C"
    FFA5A4 = "#FFA5A4"
    field_83D17F = "#83D17F"
    FFAC7B = "#FFAC7B"
    field_8E3F64 = "#8E3F64"
    C75300 = "#C75300"
    field_009CEC = "#009CEC"
    field_62D6B1 = "#62D6B1"
    field_9EEDCB = "#9EEDCB"
    F9A2C4 = "#F9A2C4"
    field_616161 = "#616161"
    BBDA81 = "#BBDA81"
    DFD3F8 = "#DFD3F8"
    D6C4A5 = "#D6C4A5"
    FFD478 = "#FFD478"
    field_6AC9DE = "#6AC9DE"
    EABBB0 = "#EABBB0"
    BFC2E1 = "#BFC2E1"
    DADADA = "#DADADA"
    CDE2F5 = "#CDE2F5"


class CalendarEntryEventTypeBase(BaseModel):
    color: Optional[Color] = Field(
        None, description="The color describing the *CalendarEntryEventType*"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *CalendarEntryEventType* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(
        None, description="ETag for the *CalendarEntryEventType*"
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *CalendarEntryEventType*"
    )
    name: Optional[str] = Field(
        None, description="The name for the *CalendarEntryEventType*"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *CalendarEntryEventType* was last updated (as a ISO-8601 timestamp)",
    )


class CalendarEntryBase(BaseModel):
    all_day: Optional[bool] = Field(None, description="Whether the event is all day")
    calendar_owner_id: Optional[int] = Field(
        None, description="The id of the calendar owner."
    )
    court_rule: Optional[bool] = Field(
        None, description="Whether this event is associated with a Court Rule"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *CalendarEntry* was created (as a ISO-8601 timestamp)",
    )
    description: Optional[str] = Field(
        None, description="A detailed description of the *CalendarEntry*"
    )
    end_at: Optional[str] = Field(
        None, description="The time the *CalendarEntry* ends (as an ISO-8601 timestamp)"
    )
    etag: Optional[str] = Field(None, description="ETag for the *CalendarEntry*")
    id: Optional[str] = Field(
        None, description="Unique identifier for the *CalendarEntry*"
    )
    location: Optional[str] = Field(
        None, description="The geographic location of the *CalendarEntry*"
    )
    parent_calendar_entry_id: Optional[int] = Field(
        None, description="Identifier for the parent *CalendarEntry*"
    )
    permission: Optional[str] = Field(
        None,
        description="The view permission for the current user, will return 'viewer' when permission is 'limited_viewer' and the user is an attendee.",
    )
    recurrence_rule: Optional[str] = Field(
        None, description="Recurrence rule for expanding"
    )
    start_at: Optional[str] = Field(
        None,
        description="The time the *CalendarEntry* starts (as an ISO-8601 timestamp)",
    )
    start_at_time_zone: Optional[str] = Field(
        None, description="Original start at time zone of the event."
    )
    summary: Optional[str] = Field(
        None, description="A short summary of the *CalendarEntry*"
    )
    time_entries_count: Optional[int] = Field(
        None,
        description="The number of `TimeEntry` activities associated with the *CalendarEntry*",
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *CalendarEntry* was last updated (as a ISO-8601 timestamp)",
    )


class Color1(Enum):
    """
    Calendar color
    """

    field_658CDA = "#658CDA"
    DA6666 = "#DA6666"
    field_49B050 = "#49B050"
    E7804C = "#E7804C"
    field_8C66DA = "#8C66DA"
    C4A882 = "#C4A882"
    field_64AD88 = "#64AD88"
    field_84AAA5 = "#84AAA5"
    field_56BFB3 = "#56BFB3"
    E77399 = "#E77399"
    BFBF4B = "#BFBF4B"
    field_8BBF3C = "#8BBF3C"
    B473B4 = "#B473B4"
    A7A77D = "#A7A77D"
    F2A53D = "#F2A53D"
    field_658CB3 = "#658CB3"
    BE9494 = "#BE9494"
    A992A9 = "#A992A9"
    field_8897A5 = "#8897A5"
    field_93A2BE = "#93A2BE"


class LightColor(Enum):
    """
    Accent color to complement the main calendar color.
    """

    field_5DA5C7 = "#5DA5C7"
    F95957 = "#F95957"
    field_209412 = "#209412"
    FF7715 = "#FF7715"
    DE649D = "#DE649D"
    FF6B02 = "#FF6B02"
    field_56C4FC = "#56C4FC"
    field_00B177 = "#00B177"
    field_50D19B = "#50D19B"
    F14A8C = "#F14A8C"
    A3A2A2 = "#A3A2A2"
    field_84AB3B = "#84AB3B"
    B091EE = "#B091EE"
    BD9E69 = "#BD9E69"
    F2A000 = "#F2A000"
    field_00A5CA = "#00A5CA"
    CB5A3D = "#CB5A3D"
    field_959CD0 = "#959CD0"
    B0B0B0 = "#B0B0B0"
    field_7BA6CD = "#7BA6CD"


class CalendarVisibilityBase(BaseModel):
    color: Optional[Color1] = Field(None, description="Calendar color")
    created_at: Optional[str] = Field(
        None,
        description="The time the *CalendarVisibility* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *CalendarVisibility*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *CalendarVisibility*"
    )
    light_color: Optional[LightColor] = Field(
        None, description="Accent color to complement the main calendar color."
    )
    name: Optional[str] = Field(None, description="Calendar name")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *CalendarVisibility* was last updated (as a ISO-8601 timestamp)",
    )
    visible: Optional[bool] = Field(
        None,
        description="Whether the *CalendarVisibility* will be shown by default in the Clio Web UI.",
    )


class Color2(Enum):
    """
    Color
    """

    field_367B9C = "#367B9C"
    FFA5A4 = "#FFA5A4"
    field_83D17F = "#83D17F"
    FFAC7B = "#FFAC7B"
    field_8E3F64 = "#8E3F64"
    C75300 = "#C75300"
    field_009CEC = "#009CEC"
    field_62D6B1 = "#62D6B1"
    field_9EEDCB = "#9EEDCB"
    F9A2C4 = "#F9A2C4"
    field_616161 = "#616161"
    BBDA81 = "#BBDA81"
    DFD3F8 = "#DFD3F8"
    D6C4A5 = "#D6C4A5"
    FFD478 = "#FFD478"
    field_6AC9DE = "#6AC9DE"
    EABBB0 = "#EABBB0"
    BFC2E1 = "#BFC2E1"
    DADADA = "#DADADA"
    CDE2F5 = "#CDE2F5"


class Permission(Enum):
    """
    The user's permission to the *Calendar*
    """

    owner = "owner"
    editor = "editor"
    viewer = "viewer"
    limited_viewer = "limited_viewer"
    none = "none"


class Source(Enum):
    """
    The source that visible applies to, by default the Clio Web UI (Expects 'mobile' or 'web').
    """

    web = "web"
    mobile = "mobile"


class Type6(Enum):
    """
    The type of the *Calendar*
    """

    AccountCalendar = "AccountCalendar"
    AdhocCalendar = "AdhocCalendar"
    UserCalendar = "UserCalendar"


class CalendarBase(BaseModel):
    color: Optional[Color2] = Field(None, description="Color")
    court_rules_default_calendar: Optional[bool] = Field(
        None,
        description="Whether the calendar is default court rules calendar for current user",
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *Calendar* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *Calendar*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Calendar*")
    light_color: Optional[LightColor] = Field(
        None, description="Accent color to complement the main calendar color."
    )
    name: Optional[str] = Field(None, description="The name of the *Calendar*")
    permission: Optional[Permission] = Field(
        None, description="The user's permission to the *Calendar*"
    )
    source: Optional[Source] = Field(
        None,
        description="The source that visible applies to, by default the Clio Web UI (Expects 'mobile' or 'web').",
    )
    type: Optional[Type6] = Field(None, description="The type of the *Calendar*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Calendar* was last updated (as a ISO-8601 timestamp)",
    )
    visible: Optional[bool] = Field(
        None,
        description="Whether the *Calendar* will be shown by default in the Clio Web UI (assuming no source is provided).",
    )


class CascadingTaskTemplateBase(BaseModel):
    id: Optional[int] = Field(
        None, description="Unique identifier for the *TaskTemplate*"
    )
    name: Optional[str] = Field(None, description="The name of the *TaskTemplate*")


class ClientPortalBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *ClientPortal* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *ClientPortal*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *ClientPortal*"
    )
    unread_count: Optional[int] = Field(
        None, description="The number of unread count messages for the current user."
    )
    unread_notifiable_count: Optional[int] = Field(
        None,
        description="The number of unread messages for the current user once their notification settings have been applied.",
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *ClientPortal* was last updated (as a ISO-8601 timestamp)",
    )


class Type7(Enum):
    """
    The type of the *Client*
    """

    Company = "Company"
    Person = "Person"


class ClientBase(BaseModel):
    client_connect_user_id: Optional[int] = Field(
        None, description="The client connect ID of the contacts associated user"
    )
    created_at: Optional[str] = Field(
        None, description="The time the *Client* was created (as a ISO-8601 timestamp)"
    )
    date_of_birth: Optional[str] = Field(None, description="Date of Birth")
    first_name: Optional[str] = Field(None, description="First name of the Person")
    id: Optional[int] = Field(None, description="Unique identifier for the *Client*")
    initials: Optional[str] = Field(None, description="The initials of the *Client*")
    is_matter_client: Optional[bool] = Field(
        None, description="Whether or not the Client is also the client of the matter"
    )
    last_name: Optional[str] = Field(None, description="Last name of the Person")
    middle_name: Optional[str] = Field(None, description="Middle name of the Person")
    name: Optional[str] = Field(None, description="The full name of the *Client*")
    prefix: Optional[str] = Field(
        None, description="The prefix of the *Client* (Mr, Mrs, etc)"
    )
    primary_email_address: Optional[str] = Field(
        None, description="The primary email address of client"
    )
    primary_phone_number: Optional[str] = Field(
        None, description="The primary phone number of client"
    )
    title: Optional[str] = Field(
        None, description="The designated title of the *Client*"
    )
    type: Optional[Type7] = Field(None, description="The type of the *Client*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Client* was last updated (as a ISO-8601 timestamp)",
    )


class SubscriptionType(Enum):
    """
    The subscription type of the *ClioCreator*
    """

    Attorney = "Attorney"
    NonAttorney = "NonAttorney"


class Type8(Enum):
    """
    The type of the *ClioCreator*
    """

    ManageUser = "ManageUser"
    ClientUser = "ClientUser"


class ClioCreatorBase(BaseModel):
    account_owner: Optional[bool] = Field(
        None, description="Whether the *ClioCreator* is the owner of the account"
    )
    clio_connect: Optional[bool] = Field(
        None, description="Whether the *ClioCreator* is a Clio Connect user"
    )
    court_rules_default_attendee: Optional[bool] = Field(
        None,
        description="Whether the *ClioCreator* is a default attendee for court rules events",
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *ClioCreator* was created (as a ISO-8601 timestamp)",
    )
    default_calendar_id: Optional[int] = Field(
        None, description="Default calendar id for *ClioCreator*."
    )
    email: Optional[str] = Field(None, description="The email of the *ClioCreator*")
    enabled: Optional[bool] = Field(
        None, description="Whether the *ClioCreator* is allowed to log in"
    )
    etag: Optional[str] = Field(None, description="ETag for the *ClioCreator*")
    first_name: Optional[str] = Field(
        None, description="The first name of the *ClioCreator*"
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *ClioCreator*"
    )
    initials: Optional[str] = Field(
        None, description="The initials of the *ClioCreator*"
    )
    last_name: Optional[str] = Field(
        None, description="The last name of the *ClioCreator*"
    )
    name: Optional[str] = Field(None, description="The full name of the *ClioCreator*")
    phone_number: Optional[str] = Field(
        None, description="The primary phone number for the *ClioCreator*."
    )
    rate: Optional[float] = Field(
        None, description="Default user activity rate for *ClioCreator*."
    )
    roles: Optional[List[str]] = Field(
        None, description="An array of roles assigned to this *ClioCreator*"
    )
    subscription_type: Optional[SubscriptionType] = Field(
        None, description="The subscription type of the *ClioCreator*"
    )
    time_zone: Optional[str] = Field(
        None, description="The selected time zone of the *ClioCreator*"
    )
    type: Optional[Type8] = Field(None, description="The type of the *ClioCreator*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *ClioCreator* was last updated (as a ISO-8601 timestamp)",
    )


class ClioPaymentsLinkBase(BaseModel):
    active: Optional[bool] = Field(
        None, description="Whether or not the payment link is active."
    )
    amount: Optional[float] = Field(
        None, description="The defined amount of the payment link, if set."
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *ClioPaymentsLink* was created (as a ISO-8601 timestamp)",
    )
    currency: Optional[str] = Field(
        None, description="The currency the payment link will collect."
    )
    description: Optional[str] = Field(
        None, description="The defined description of the payment link, if set."
    )
    email_address: Optional[str] = Field(
        None,
        description="The email address to pre-fill the field on the the payment link, if set.",
    )
    etag: Optional[str] = Field(None, description="ETag for the *ClioPaymentsLink*")
    expires_at: Optional[str] = Field(
        None, description="The ISO 8601 date and time the payment link will expire."
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *ClioPaymentsLink*"
    )
    is_allocated_as_revenue: Optional[bool] = Field(
        None, description="Whether the payment link is allocated as revenue."
    )
    redirect_url: Optional[str] = Field(
        None,
        description="The URL to redirect the client to after the payment has been made.",
    )
    url: Optional[str] = Field(None, description="The URL of the payment link.")


class State1(Enum):
    """
    The state of the payment (authorized, completed, failed, etc).
    """

    pending = "pending"
    authorized = "authorized"
    completed = "completed"
    voided = "voided"
    failed = "failed"
    canceled = "canceled"
    requires_confirmation = "requires_confirmation"
    completed_requiring_allocation = "completed_requiring_allocation"


class ClioPaymentsPaymentBase(BaseModel):
    amount: Optional[float] = Field(None, description="The amount of the payment.")
    confirmation_number: Optional[str] = Field(
        None, description="The confirmatin number of the payment."
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *ClioPaymentsPayment* was created (as a ISO-8601 timestamp)",
    )
    currency: Optional[str] = Field(
        None, description="The currency the payment was processed in."
    )
    deposit_as_revenue: Optional[bool] = Field(
        None, description="Whether the payment was deposited as revenue."
    )
    description: Optional[str] = Field(
        None, description="The description of the payment."
    )
    email_address: Optional[str] = Field(
        None, description="The email address of the client."
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *ClioPaymentsPayment*"
    )
    state: Optional[State1] = Field(
        None,
        description="The state of the payment (authorized, completed, failed, etc).",
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *ClioPaymentsPayment* was last updated (as a ISO-8601 timestamp)",
    )


class CommentBase(BaseModel):
    created_at: Optional[str] = Field(
        None, description="The time the *Comment* was created (as a ISO-8601 timestamp)"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Comment*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Comment*")
    message: Optional[str] = Field(None, description="The content of the Comment")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Comment* was last updated (as a ISO-8601 timestamp)",
    )


class CommunicationEmlFileBase(BaseModel):
    id: Optional[int] = Field(
        None, description="Unique identifier for the *CommunicationEmlFile*"
    )


class Type9(Enum):
    """
    The type of the *Communication*
    """

    EmailCommunication = "EmailCommunication"
    PhoneCommunication = "PhoneCommunication"


class CommunicationBase(BaseModel):
    body: Optional[str] = Field(
        None, description="The main content of the *Communication*"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *Communication* was created (as a ISO-8601 timestamp)",
    )
    date: Optional[str] = Field(
        None, description="The date of the *Communication* (as a ISO-8601 datestamp)"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Communication*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *Communication*"
    )
    received_at: Optional[str] = Field(
        None, description="The date-time of the *Communication* (in ISO-8601 format)"
    )
    subject: Optional[str] = Field(
        None, description="The subject line of the *Communication*"
    )
    time_entries_count: Optional[int] = Field(
        None,
        description="The number of time_entries associated with the *Communication*",
    )
    type: Optional[Type9] = Field(None, description="The type of the *Communication*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Communication* was last updated (as a ISO-8601 timestamp)",
    )


class ConferenceMeetingBase(BaseModel):
    conference_id: Optional[int] = Field(
        None, description="Third-party provider unique meeting ID"
    )
    conference_password: Optional[str] = Field(
        None, description="Third-party provider meeting password"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *ConferenceMeeting* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *ConferenceMeeting*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *ConferenceMeeting*"
    )
    join_url: Optional[str] = Field(
        None, description="URL for participants to join the video conference"
    )
    source_id: Optional[int] = Field(
        None, description="The external ID of the video conference meeting"
    )
    type: Optional[str] = Field(None, description="The type of video conference")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *ConferenceMeeting* was last updated (as a ISO-8601 timestamp)",
    )


class Type10(Enum):
    """
    The type of the *Contact*
    """

    Company = "Company"
    Person = "Person"


class ContactBase(BaseModel):
    client_connect_user_id: Optional[int] = Field(
        None,
        description="The ID for the Clio Connect user associated with this *Contact*",
    )
    clio_connect_email: Optional[str] = Field(
        None, description="Clio Connect email if the *Contact* is a ClioConnect User"
    )
    created_at: Optional[str] = Field(
        None, description="The time the *Contact* was created (as a ISO-8601 timestamp)"
    )
    date_of_birth: Optional[str] = Field(None, description="Date of birth")
    etag: Optional[str] = Field(None, description="ETag for the *Contact*")
    first_name: Optional[str] = Field(None, description="First name of the Person")
    has_clio_for_clients_permission: Optional[bool] = Field(
        None,
        description="True if at least one resource has been shared with the contact using Clio for Clients.",
    )
    id: Optional[int] = Field(None, description="Unique identifier for the *Contact*")
    initials: Optional[str] = Field(None, description="The initials of the *Contact*")
    is_bill_recipient: Optional[bool] = Field(
        None,
        description="Whether the Contact is a bill recipient on at least one matter.",
    )
    is_client: Optional[bool] = Field(
        None, description="Whether or not the Contact is a client"
    )
    is_clio_for_client_user: Optional[bool] = Field(
        None,
        description="Whether or not this contact has client_login and client_user (can be created due to addition to client portal or client_share_permissions)",
    )
    is_co_counsel: Optional[bool] = Field(
        None, description="Whether or not the Contact has matters shared as co-counsel"
    )
    last_name: Optional[str] = Field(None, description="Last name of the Person")
    ledes_client_id: Optional[str] = Field(
        None, description="LEDES client id of the Contact"
    )
    locked_clio_connect_email: Optional[bool] = Field(
        None,
        description="A boolean indicating if the ability to modify this *Contacts Clio connect email is locked.",
    )
    middle_name: Optional[str] = Field(None, description="Middle name of the Person")
    name: Optional[str] = Field(None, description="The full name of the *Contact*")
    prefix: Optional[str] = Field(
        None, description="The prefix of the *Contact* (Mr, Mrs, etc)"
    )
    primary_email_address: Optional[str] = Field(
        None, description="The primary email address associated with this *Contact*."
    )
    primary_phone_number: Optional[str] = Field(
        None, description="The primary phone number associated with this *Contact*."
    )
    sales_tax_number: Optional[str] = Field(
        None, description="The sales tax number of the *Contact*"
    )
    secondary_email_address: Optional[str] = Field(
        None, description="The secondary email address associated with this *Contact*."
    )
    secondary_phone_number: Optional[str] = Field(
        None, description="The secondary phone number of the *Contact*."
    )
    title: Optional[str] = Field(
        None, description="The designated title of the *Contact*"
    )
    type: Optional[Type10] = Field(None, description="The type of the *Contact*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Contact* was last updated (as a ISO-8601 timestamp)",
    )


class ContingencyFeeBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *ContingencyFee* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *ContingencyFee*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *ContingencyFee*"
    )
    show_contingency_award: Optional[bool] = Field(
        None, description="Whether the *ContingencyFee* is posted or on a bill"
    )
    ed_at: Optional[str] = Field(
        None,
        description="The time the *ContingencyFee* was last updated (as a ISO-8601 timestamp)",
    )


class ConversationMembershipBase(BaseModel):
    archived: Optional[bool] = Field(
        None,
        description="Whether or not the ConversationMembership has been archived by the member",
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *ConversationMembership* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(
        None, description="ETag for the *ConversationMembership*"
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *ConversationMembership*"
    )
    read: Optional[bool] = Field(
        None,
        description="Whether or not the ConversationMembership has been read by the member",
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *ConversationMembership* was last updated (as a ISO-8601 timestamp)",
    )


class ConversationMessageBase(BaseModel):
    body: Optional[str] = Field(
        None, description="The main content of the *ConversationMessage*"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *ConversationMessage* was created (as a ISO-8601 timestamp)",
    )
    date: Optional[str] = Field(
        None,
        description="The creation date of the message in the current user's time zone",
    )
    etag: Optional[str] = Field(None, description="ETag for the *ConversationMessage*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *ConversationMessage*"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *ConversationMessage* was last updated (as a ISO-8601 timestamp)",
    )


class ConversationBase(BaseModel):
    archived: Optional[bool] = Field(
        None, description="Whether the conversation has been archived"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *Conversation* was created (as a ISO-8601 timestamp)",
    )
    current_user_is_member: Optional[bool] = Field(
        None, description="Whether the current user is a member of this conversation"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Conversation*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *Conversation*"
    )
    message_count: Optional[int] = Field(
        None, description="The number of messages in this conversation"
    )
    read: Optional[bool] = Field(
        None, description="Whether any messages in this conversation have been viewed"
    )
    read_only: Optional[bool] = Field(
        None, description="Whether the conversation is read only"
    )
    subject: Optional[str] = Field(
        None, description="The subject of the *Conversation*"
    )
    time_entries_count: Optional[int] = Field(
        None, description="The number of time entries applied to this conversation"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Conversation* was last updated (as a ISO-8601 timestamp)",
    )


class CreditMemo(CreditMemoBase):
    allocations: Optional[List[AllocationBase]] = Field(None, description="Allocation")
    contact: Optional[ContactBase] = None
    user: Optional[UserBase] = None


class CreditMemoList(BaseModel):
    data: List[CreditMemo] = Field(..., description="CreditMemo List Response")


class CreditMemoShow(BaseModel):
    data: CreditMemo


class Currency(CurrencyBase):
    pass


class CurrencyList(BaseModel):
    data: List[Currency] = Field(..., description="Currency List Response")


class CustomAction(CustomActionBase):
    pass


class CustomActionList(BaseModel):
    data: List[CustomAction] = Field(..., description="CustomAction List Response")


class CustomActionShow(BaseModel):
    data: CustomAction


class CustomFieldSet(CustomFieldSetBase):
    custom_fields: Optional[List[CustomFieldBase]] = Field(
        None, description="CustomField"
    )


class CustomFieldSetList(BaseModel):
    data: List[CustomFieldSet] = Field(..., description="CustomFieldSet List Response")


class CustomFieldSetShow(BaseModel):
    data: CustomFieldSet


class Damage(DamageBase):
    matter: Optional[MatterBase] = None


class DamageList(BaseModel):
    data: List[Damage] = Field(..., description="Damage List Response")


class DamageShow(BaseModel):
    data: Damage


class DocumentArchive(DocumentArchiveBase):
    pass


class DocumentArchiveShow(BaseModel):
    data: DocumentArchive


class DocumentAutomation(DocumentAutomationBase):
    document_template: Optional[DocumentTemplateBase] = None
    documents: Optional[List[DocumentBase]] = Field(None, description="Document")
    matter: Optional[MatterBase] = None


class DocumentAutomationList(BaseModel):
    data: List[DocumentAutomation] = Field(
        ..., description="DocumentAutomation List Response"
    )


class DocumentAutomationShow(BaseModel):
    data: DocumentAutomation


class DocumentCategory(DocumentCategoryBase):
    pass


class DocumentCategoryList(BaseModel):
    data: List[DocumentCategory] = Field(
        ..., description="DocumentCategory List Response"
    )


class DocumentCategoryShow(BaseModel):
    data: DocumentCategory


class DocumentTemplate(DocumentTemplateBase):
    document_category: Optional[DocumentCategoryBase] = None
    last_modified_by: Optional[UserBase] = None


class DocumentTemplateList(BaseModel):
    data: List[DocumentTemplate] = Field(
        ..., description="DocumentTemplate List Response"
    )


class DocumentTemplateShow(BaseModel):
    data: DocumentTemplate


class Error(BaseModel):
    error: ErrorDetail


class EventMetrics(EventMetricsBase):
    pass


class EventMetricsShow(BaseModel):
    data: EventMetrics


class ExpenseCategory(ExpenseCategoryBase):
    groups: Optional[List[GroupBase]] = Field(None, description="Group")
    utbms_code: Optional[UtbmsCodeBase] = None


class ExpenseCategoryList(BaseModel):
    data: List[ExpenseCategory] = Field(
        ..., description="ExpenseCategory List Response"
    )


class ExpenseCategoryShow(BaseModel):
    data: ExpenseCategory


class Folder(FolderBase):
    contact: Optional[ContactBase] = None
    creator: Optional[ClioCreatorBase] = None
    document_category: Optional[DocumentCategoryBase] = None
    external_properties: Optional[List[ExternalPropertyBase]] = Field(
        None, description="ExternalProperty"
    )
    group: Optional[GroupBase] = None
    latest_document_version: Optional[DocumentVersionBase] = None
    matter: Optional[MatterBase] = None
    parent: Optional[LinkedFolderBase] = None


class FolderList(BaseModel):
    data: List[Folder] = Field(..., description="Folder List Response")


class FolderShow(BaseModel):
    data: Folder


class Grant(GrantBase):
    grant_funding_source: Optional[GrantFundingSourceBase] = None


class GrantFundingSource(GrantFundingSourceBase):
    grants: Optional[List[GrantBase]] = Field(None, description="Grant")


class GrantFundingSourceList(BaseModel):
    data: List[GrantFundingSource] = Field(
        ..., description="GrantFundingSource List Response"
    )


class GrantFundingSourceShow(BaseModel):
    data: GrantFundingSource


class GrantList(BaseModel):
    data: List[Grant] = Field(..., description="Grant List Response")


class GrantShow(BaseModel):
    data: Grant


class Group(GroupBase):
    users: Optional[List[UserBase]] = Field(None, description="User")


class GroupList(BaseModel):
    data: List[Group] = Field(..., description="Group List Response")


class GroupShow(BaseModel):
    data: Group


class InterestCharge(InterestChargeBase):
    balances: Optional[List[BalanceBase]] = Field(None, description="Balance")
    bill: Optional[BillBase] = None
    matters: Optional[List[MatterBase]] = Field(None, description="Matter")


class InterestChargeList(BaseModel):
    data: List[InterestCharge] = Field(..., description="InterestCharge List Response")


class Item(ItemBase):
    contact: Optional[ContactBase] = None
    creator: Optional[ClioCreatorBase] = None
    document_category: Optional[DocumentCategoryBase] = None
    external_properties: Optional[List[ExternalPropertyBase]] = Field(
        None, description="ExternalProperty"
    )
    group: Optional[GroupBase] = None
    latest_document_version: Optional[DocumentVersionBase] = None
    matter: Optional[MatterBase] = None
    parent: Optional[LinkedFolderBase] = None


class ItemList(BaseModel):
    data: List[Item] = Field(..., description="Item List Response")


class Jurisdiction(JurisdictionBase):
    service_types: Optional[List[ServiceTypeBase]] = Field(
        None, description="ServiceType"
    )


class JurisdictionList(BaseModel):
    data: List[Jurisdiction] = Field(..., description="Jurisdiction List Response")


class JurisdictionShow(BaseModel):
    data: Jurisdiction


class JurisdictionsToTrigger(JurisdictionsToTriggerBase):
    pass


class JurisdictionsToTriggerList(BaseModel):
    data: List[JurisdictionsToTrigger] = Field(
        ..., description="JurisdictionsToTrigger List Response"
    )


class JurisdictionsToTriggerShow(BaseModel):
    data: JurisdictionsToTrigger


class LaukCivilCertificatedRate(LaukCivilCertificatedRateBase):
    pass


class LaukCivilCertificatedRateList(BaseModel):
    data: List[LaukCivilCertificatedRate] = Field(
        ..., description="LaukCivilCertificatedRate List Response"
    )


class LaukCivilControlledRate(LaukCivilControlledRateBase):
    pass


class LaukCivilControlledRateList(BaseModel):
    data: List[LaukCivilControlledRate] = Field(
        ..., description="LaukCivilControlledRate List Response"
    )


class LaukCriminalControlledRate(LaukCriminalControlledRateBase):
    pass


class LaukCriminalControlledRateList(BaseModel):
    data: List[LaukCriminalControlledRate] = Field(
        ..., description="LaukCriminalControlledRate List Response"
    )


class LaukExpenseCategory(LaukExpenseCategoryBase):
    pass


class LaukExpenseCategoryList(BaseModel):
    data: List[LaukExpenseCategory] = Field(
        ..., description="LaukExpenseCategory List Response"
    )


class LineItem(LineItemBase):
    activity: Optional[ActivityBase] = None
    bill: Optional[BillBase] = None
    discount: Optional[DiscountBase] = None
    included_line_item_totals: Optional[LineItemTotalsBase] = None
    matter: Optional[MatterBase] = None
    user: Optional[UserBase] = None


class LineItemList(BaseModel):
    data: List[LineItem] = Field(..., description="LineItem List Response")


class LineItemShow(BaseModel):
    data: LineItem


class LogEntry(LogEntryBase):
    item: Optional[PolymorphicObjectBase] = None
    user: Optional[UserBase] = None


class LogEntryList(BaseModel):
    data: List[LogEntry] = Field(..., description="LogEntry List Response")


class MatterBillRecipient(MatterBillRecipientBase):
    recipient: Optional[ContactBase] = None


class MatterContacts(MatterContactsBase):
    addresses: Optional[List[AddressBase]] = Field(None, description="Address")
    avatar: Optional[AvatarBase] = None
    company: Optional[ContactBase] = None
    custom_field_values: Optional[List[CustomFieldValueBase]] = Field(
        None, description="CustomFieldValue"
    )
    email_addresses: Optional[List[EmailAddressBase]] = Field(
        None, description="EmailAddress"
    )
    phone_numbers: Optional[List[PhoneNumberBase]] = Field(
        None, description="PhoneNumber"
    )
    primary_address: Optional[AddressBase] = None
    primary_web_site: Optional[WebSiteBase] = None
    relationship: Optional[RelationshipBase] = None
    secondary_address: Optional[AddressBase] = None
    secondary_web_site: Optional[WebSiteBase] = None
    web_sites: Optional[List[WebSiteBase]] = Field(None, description="WebSite")


class MatterContactsList(BaseModel):
    data: List[MatterContacts] = Field(..., description="MatterContacts List Response")


class MatterDocket(MatterDocketBase):
    calendar_entries: Optional[List[CalendarEntryBase]] = Field(
        None, description="CalendarEntry"
    )
    jurisdiction: Optional[JurisdictionBase] = None
    matter: Optional[MatterBase] = None
    service_type: Optional[ServiceTypeBase] = None
    trigger: Optional[JurisdictionsToTriggerBase] = None


class MatterDocketList(BaseModel):
    data: List[MatterDocket] = Field(..., description="MatterDocket List Response")


class MatterDocketShow(BaseModel):
    data: MatterDocket


class MatterStage(MatterStageBase):
    pass


class MatterStageList(BaseModel):
    data: List[MatterStage] = Field(..., description="MatterStage List Response")


class MedicalBill(MedicalBillBase):
    liens: Optional[List[LienBase]] = Field(None, description="Lien")
    matter: Optional[MatterBase] = None


class MedicalBillShow(BaseModel):
    data: MedicalBill


class MedicalRecord(MedicalRecordBase):
    matter: Optional[MatterBase] = None


class MedicalRecordShow(BaseModel):
    data: MedicalRecord


class MedicalRecordsRequest(MedicalRecordsRequestBase):
    matter: Optional[MatterBase] = None
    medical_bills: Optional[List[MedicalBillBase]] = Field(
        None, description="MedicalBill"
    )
    medical_provider: Optional[ContactBase] = None
    medical_records: Optional[List[MedicalRecordBase]] = Field(
        None, description="MedicalRecord"
    )


class MedicalRecordsRequestList(BaseModel):
    data: List[MedicalRecordsRequest] = Field(
        ..., description="MedicalRecordsRequest List Response"
    )


class MedicalRecordsRequestShow(BaseModel):
    data: MedicalRecordsRequest


class Multipart(MultipartBase):
    put_headers: Optional[List[MultipartHeaderBase]] = Field(
        None, description="MultipartHeader"
    )


class MyEvent(MyEventBase):
    event: Optional[EventBase] = None


class MyEventList(BaseModel):
    data: List[MyEvent] = Field(..., description="MyEvent List Response")


class MyEventShow(BaseModel):
    data: MyEvent


class Note(NoteBase):
    pass


class NoteList(BaseModel):
    data: List[Note] = Field(..., description="Note List Response")


class NoteShow(BaseModel):
    data: Note


class OutstandingClientBalance(OutstandingClientBalanceBase):
    contact: Optional[ContactBase] = None
    currency: Optional[CurrencyBase] = None
    outstanding_bills: Optional[List[BillBase]] = Field(None, description="Bill")


class OutstandingClientBalanceList(BaseModel):
    data: List[OutstandingClientBalance] = Field(
        ..., description="OutstandingClientBalance List Response"
    )


class Participant(ParticipantBase):
    avatar: Optional[AvatarBase] = None


class PicklistOption(PicklistOptionBase):
    pass


class PolymorphicCustomRate(PolymorphicCustomRateBase):
    activity_description: Optional[PolymorphicCustomRateActivityDescriptionBase] = None
    group: Optional[PolymorphicCustomRateGroupBase] = None
    user: Optional[PolymorphicCustomRateUserBase] = None


class PracticeArea(PracticeAreaBase):
    pass


class PracticeAreaList(BaseModel):
    data: List[PracticeArea] = Field(..., description="PracticeArea List Response")


class PracticeAreaShow(BaseModel):
    data: PracticeArea


class RelatedContacts(RelatedContactsBase):
    addresses: Optional[List[AddressBase]] = Field(None, description="Address")
    avatar: Optional[AvatarBase] = None
    company: Optional[ContactBase] = None
    custom_field_values: Optional[List[CustomFieldValueBase]] = Field(
        None, description="CustomFieldValue"
    )
    email_addresses: Optional[List[EmailAddressBase]] = Field(
        None, description="EmailAddress"
    )
    phone_numbers: Optional[List[PhoneNumberBase]] = Field(
        None, description="PhoneNumber"
    )
    primary_address: Optional[AddressBase] = None
    primary_web_site: Optional[WebSiteBase] = None
    relationship: Optional[RelationshipBase] = None
    secondary_address: Optional[AddressBase] = None
    secondary_web_site: Optional[WebSiteBase] = None
    web_sites: Optional[List[WebSiteBase]] = Field(None, description="WebSite")


class RelatedContactsList(BaseModel):
    data: List[RelatedContacts] = Field(
        ..., description="RelatedContacts List Response"
    )


class Relationship(RelationshipBase):
    contact: Optional[ContactBase] = None
    matter: Optional[MatterBase] = None


class RelationshipList(BaseModel):
    data: List[Relationship] = Field(..., description="Relationship List Response")


class RelationshipShow(BaseModel):
    data: Relationship


class Reminder(ReminderBase):
    notification_method: Optional[NotificationMethodBase] = None
    subject: Optional[PolymorphicObjectBase] = None


class ReminderList(BaseModel):
    data: List[Reminder] = Field(..., description="Reminder List Response")


class ReminderShow(BaseModel):
    data: Reminder


class Report(ReportBase):
    pass


class ReportPreset(ReportPresetBase):
    report_schedule: Optional[ReportScheduleBase] = None


class ReportPresetList(BaseModel):
    data: List[ReportPreset] = Field(..., description="ReportPreset List Response")


class ReportPresetShow(BaseModel):
    data: ReportPreset


class ReportSchedule(ReportScheduleBase):
    pass


class ReportScheduleList(BaseModel):
    data: List[ReportSchedule] = Field(..., description="ReportSchedule List Response")


class ReportScheduleShow(BaseModel):
    data: ReportSchedule


class ReportList(BaseModel):
    data: List[Report] = Field(..., description="Report List Response")


class ReportShow(BaseModel):
    data: Report


class ServiceType(ServiceTypeBase):
    pass


class ServiceTypeList(BaseModel):
    data: List[ServiceType] = Field(..., description="ServiceType List Response")


class ServiceTypeShow(BaseModel):
    data: ServiceType


class TaskTemplate(TaskTemplateBase):
    assignee: Optional[UserBase] = None
    cascading_source: Optional[CascadingTaskTemplateBase] = None
    reminder_templates: Optional[List[ReminderTemplateBase]] = Field(
        None, description="ReminderTemplate"
    )
    task_template_list: Optional[TaskTemplateListBase] = None
    task_type: Optional[TaskTypeBase] = None
    template_creator: Optional[UserBase] = None


class TaskTemplateList(TaskTemplateListBase):
    creator: Optional[UserBase] = None
    practice_area: Optional[PracticeAreaBase] = None


class TaskTemplateListList(BaseModel):
    data: List[TaskTemplateList] = Field(
        ..., description="TaskTemplateList List Response"
    )


class TaskTemplateListShow(BaseModel):
    data: TaskTemplateList


class TaskTemplateShow(BaseModel):
    data: TaskTemplate


class TaskType(TaskTypeBase):
    pass


class TaskTypeList(BaseModel):
    data: List[TaskType] = Field(..., description="TaskType List Response")


class TaskTypeShow(BaseModel):
    data: TaskType


class TextSnippet(TextSnippetBase):
    pass


class TextSnippetList(BaseModel):
    data: List[TextSnippet] = Field(..., description="TextSnippet List Response")


class TextSnippetShow(BaseModel):
    data: TextSnippet


class Timer(TimerBase):
    activity: Optional[ActivityBase] = None


class TimerShow(BaseModel):
    data: Timer


class TrustLineItem(TrustLineItemBase):
    bill: Optional[BillBase] = None
    client: Optional[ContactBase] = None
    matter: Optional[MatterBase] = None


class TrustLineItemList(BaseModel):
    data: List[TrustLineItem] = Field(..., description="TrustLineItem List Response")


class TrustLineItemShow(BaseModel):
    data: TrustLineItem


class TrustRequest(TrustRequestBase):
    pass


class TrustRequestShow(BaseModel):
    data: TrustRequest


class UtbmsCode(UtbmsCodeBase):
    pass


class UtbmsCodeList(BaseModel):
    data: List[UtbmsCode] = Field(..., description="UtbmsCode List Response")


class UtbmsCodeShow(BaseModel):
    data: UtbmsCode


class UtbmsSet(UtbmsSetBase):
    pass


class UtbmsSetList(BaseModel):
    data: List[UtbmsSet] = Field(..., description="UtbmsSet List Response")


class Webhook(WebhookBase):
    pass


class WebhookList(BaseModel):
    data: List[Webhook] = Field(..., description="Webhook List Response")


class WebhookShow(BaseModel):
    data: Webhook


class CustomFieldExtended(CustomFieldBase):
    picklist_options: Optional[List[PicklistOption]] = None


class Communication(CommunicationBase):
    communication_eml_file: Optional[CommunicationEmlFileBase] = None
    documents: Optional[List[DocumentBase]] = Field(None, description="Document")
    external_properties: Optional[List[ExternalPropertyBase]] = Field(
        None, description="ExternalProperty"
    )
    matter: Optional[MatterBase] = None
    notification_event_subscribers: Optional[List[NotificationEventSubscriberBase]] = (
        Field(None, description="NotificationEventSubscriber")
    )
    receivers: Optional[List[Participant]] = Field(None, description="Participant")
    senders: Optional[List[Participant]] = Field(None, description="Participant")
    time_entries: Optional[List[ActivityBase]] = Field(None, description="Activity")
    user: Optional[UserBase] = None


class CommunicationList(BaseModel):
    data: List[Communication] = Field(..., description="Communication List Response")


class CommunicationShow(BaseModel):
    data: Communication


class Contact(ContactBase, ContactShow):
    pass


class ContactList(BaseModel):
    data: List[Contact] = Field(..., description="Contact List Response")


class Conversation(ConversationBase):
    documents: Optional[List[DocumentBase]] = Field(None, description="Document")
    first_message: Optional[ConversationMessageBase] = None
    last_message: Optional[ConversationMessageBase] = None
    matter: Optional[MatterBase] = None
    memberships: Optional[List[ConversationMembership]] = Field(
        None, description="ConversationMembership"
    )
    messages: Optional[List[ConversationMessageBase]] = Field(
        None, description="ConversationMessage"
    )


class ConversationList(BaseModel):
    data: List[Conversation] = Field(..., description="Conversation List Response")


class ConversationShow(BaseModel):
    data: Conversation


class CustomField(CustomFieldBase, CustomFieldExtended):
    pass


class CustomFieldList(BaseModel):
    data: List[CustomField] = Field(..., description="CustomField List Response")


class CustomFieldShow(BaseModel):
    data: CustomField


class DocumentVersion(DocumentVersionBase):
    creator: Optional[ClioCreatorBase] = None
    multiparts: Optional[List[Multipart]] = Field(None, description="Multipart")
    put_headers: Optional[List[MultipartHeaderBase]] = Field(
        None, description="MultipartHeader"
    )


class DocumentVersionList(BaseModel):
    data: List[DocumentVersion] = Field(
        ..., description="DocumentVersion List Response"
    )


class MatterCustomRate(MatterCustomRateBase):
    rates: Optional[List[PolymorphicCustomRate]] = Field(
        None, description="PolymorphicCustomRate"
    )


class CustomFieldValueExtended(CustomFieldValueBase):
    custom_field: Optional[CustomField] = None
    picklist_option: Optional[PicklistOption] = None
    matter: Optional[Matter] = None
    contact: Optional[Contact] = None


class CustomFieldValue(CustomFieldValueBase, CustomFieldValueExtended):
    pass


class ActivityList(BaseModel):
    data: List[Activity] = Field(..., description="Activity List Response")


class ActivityShow(BaseModel):
    data: Activity


class ClientShow(BaseModel):
    data: Client


class DocumentList(BaseModel):
    data: List[Document] = Field(..., description="Document List Response")


class DocumentShow(BaseModel):
    data: Document


class MatterList(BaseModel):
    data: List[Matter1] = Field(..., description="Matter List Response")


class MatterShow(BaseModel):
    data: Matter1


class TaskList(BaseModel):
    data: List[Task] = Field(..., description="Task List Response")


class TaskShow(BaseModel):
    data: Task = Field(..., description="Task")


class UserList(BaseModel):
    data: List[User] = Field(..., description="User List Response")


class UserShow(BaseModel):
    data: User = Field(..., description="User")


class Activity(ActivityBase, ActivityShow):
    pass


class Client(ClientBase, ClientShow):
    pass


class Document(DocumentBase, DocumentShow):
    pass


class Matter1(MatterBase, MatterShow):
    pass


class Task(TaskBase, TaskShow):
    pass


class User(UserBase, UserShow):
    pass


ActivityList.update_forward_refs()
ActivityShow.update_forward_refs()
ClientShow.update_forward_refs()
DocumentList.update_forward_refs()
DocumentShow.update_forward_refs()
MatterList.update_forward_refs()
MatterShow.update_forward_refs()
TaskList.update_forward_refs()
TaskShow.update_forward_refs()
UserList.update_forward_refs()
UserShow.update_forward_refs()
Activity.update_forward_refs()
Client.update_forward_refs()
Document.update_forward_refs()
Matter1.update_forward_refs()
Task.update_forward_refs()
User.update_forward_refs()
