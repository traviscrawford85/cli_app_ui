# generated by datamodel-codegen:
#   filename:  openapi_sdk.yaml

from __future__ import annotations

from decimal import Decimal
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class Matter(BaseModel):
    id: Optional[int] = None
    display_number: Optional[str] = None


class AccountBalanceBase(BaseModel):
    balance: Optional[float] = Field(
        None,
        description="The current balance of the bank account available to the matter or contact",
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *AccountBalance*"
    )
    name: Optional[str] = Field(None, description="The name of the bank account")
    type: Optional[str] = Field(
        None, description="The bank account type. Either Operating or Trust"
    )


class AccountBase(BaseModel):
    created_at: Optional[str] = Field(
        None, description="The time the *Account* was created (as a ISO-8601 timestamp)"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Account*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Account*")
    name: Optional[str] = Field(None, description="The name of the *Account*")
    state: Optional[str] = Field(None, description="Account state")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Account* was last updated (as a ISO-8601 timestamp)",
    )


class Hierarchy(Enum):
    """
    What rate hierarchy the rate belongs to.
    """

    Default = "Default"
    Activity = "Activity"
    Matter = "Matter"
    Client = "Client"


class Type(Enum):
    """
    What kind of rate it is.
    """

    User = "User"
    FlatRate = "FlatRate"
    Custom = "Custom"


class ActivityDescriptionRateBase(BaseModel):
    amount: Optional[float] = Field(
        None,
        description="Monetary value of this rate. Either hourly value or flat rate value",
    )
    hierarchy: Optional[Hierarchy] = Field(
        None, description="What rate hierarchy the rate belongs to."
    )
    non_billable_amount: Optional[float] = Field(
        None,
        description="Monetary value of this rate for non billable activities. Either hourly value or flat rate value",
    )
    type: Optional[Type] = Field(None, description="What kind of rate it is.")


class ActivityDescriptionBase(BaseModel):
    accessible_to_user: Optional[bool] = Field(
        None, description="Determines if activity description is accessible to user"
    )
    category_type: Optional[str] = Field(
        None, description="Activity category rate type. Either hourly or flat fee"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *ActivityDescription* was created (as a ISO-8601 timestamp)",
    )
    default: Optional[bool] = Field(
        None, description="Whether it is the user's default activity description"
    )
    etag: Optional[str] = Field(None, description="ETag for the *ActivityDescription*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *ActivityDescription*"
    )
    name: Optional[str] = Field(
        None, description="The name of the *ActivityDescription*"
    )
    type: Optional[str] = Field(
        None, description="The type of the *ActivityDescription*"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *ActivityDescription* was last updated (as a ISO-8601 timestamp)",
    )
    utbms_activity_id: Optional[int] = Field(
        None,
        description="The UTBMS activity id if the *ActivityDescription* is a UTBMS activity description",
    )
    utbms_task_id: Optional[int] = Field(
        None,
        description="The UTBMS activity task id if attached to a UTBMS activity description",
    )
    utbms_task_name: Optional[str] = Field(
        None,
        description="The UTBMS activity task name if attached to a UTBMS activity description",
    )
    visible_to_co_counsel: Optional[bool] = Field(
        None,
        description="A toggle that determines if a co-counsel user of the firm can have access to this activity description",
    )
    xero_service_code: Optional[str] = Field(
        None, description="Custom Xero service code for this activity description"
    )


class ActivityRateBase(BaseModel):
    co_counsel_contact_id: Optional[int] = Field(
        None, description="Filter ActivityRate records for the co-counsel."
    )
    contact_id: Optional[int] = Field(
        None, description="Filter ActivityRate records for the contact."
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *ActivityRate* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *ActivityRate*")
    flat_rate: Optional[bool] = Field(None, description="Whether this is a flat rate")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *ActivityRate*"
    )
    rate: Optional[float] = Field(
        None,
        description="Monetary value of this rate. Either hourly value or flat rate value",
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *ActivityRate* was last updated (as a ISO-8601 timestamp)",
    )


class ActivityCalendarEntryBase(BaseModel):
    calendar_owner_id: Optional[int] = Field(
        None, description="The id of the calendar owner."
    )
    etag: Optional[str] = Field(None, description="ETag for the *CalendarEntry*")
    id: Optional[str] = Field(
        None, description="Unique identifier for the *CalendarEntry*"
    )


class ActivityTaskBase(BaseModel):
    etag: Optional[str] = Field(None, description="ETag for the *Task*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Task*")


class ActivityTextMessageConversationBase(BaseModel):
    etag: Optional[str] = Field(
        None, description="ETag for the *TextMessageConversation*"
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *TextMessageConversation*"
    )


class TaxSetting(Enum):
    """
    The option denoting whether primary tax, secondary tax, or both is applied to an expense entry.
    """

    no_tax = "no_tax"
    tax_1_only = "tax_1_only"
    tax_2_only = "tax_2_only"
    tax_1_and_tax_2 = "tax_1_and_tax_2"


class Type1(Enum):
    """
    The type of the *Activity*
    """

    TimeEntry = "TimeEntry"
    ExpenseEntry = "ExpenseEntry"
    HardCostEntry = "HardCostEntry"
    SoftCostEntry = "SoftCostEntry"


class ActivityBase(BaseModel):
    billed: Optional[bool] = Field(
        None,
        description="Whether the *Activity* has been added to an active bill that is in the state of `awaiting_payment` or `paid`",
    )
    contingency_fee: Optional[bool] = Field(
        None, description="Whether or not the *Activity* is a contingency fee"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *Activity* was created (as a ISO-8601 timestamp)",
    )
    date: Optional[str] = Field(
        None, description="The date the *Activity* was performed (as a ISO-8601 date)"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Activity*")
    flat_rate: Optional[bool] = Field(
        None, description="Whether the *Activity* is a flat rate"
    )
    id: Optional[int] = Field(None, description="Unique identifier for the *Activity*")
    no_charge: Optional[bool] = Field(
        None, description="Whether the non-billable *Activity* is shown on the bill."
    )
    non_billable: Optional[bool] = Field(
        None, description="Whether the *Activity* is non-billable"
    )
    non_billable_total: Optional[float] = Field(
        None, description="The total cost of non-billable items in the *Activity*"
    )
    note: Optional[str] = Field(None, description="The details about the *Activity*")
    on_bill: Optional[bool] = Field(
        None,
        description="Whether the *Activity* has been added to an active bill that is in the state of `draft`, `awaiting_approval`, `awaiting_payment` or `paid`",
    )
    price: Optional[float] = Field(
        None, description="The hourly or flat rate of the *Activity*"
    )
    quantity: Optional[float] = Field(
        None,
        description="The field is applicable to TimeEntry, ExpenseEntry, and SoftCostEntry.\n\n**Version <= 4.0.3:**\nThe number of hours the TimeEntry took.\n\n**Latest version:**\nThe number of seconds the TimeEntry took.\n",
    )
    quantity_in_hours: Optional[float] = Field(
        None, description="The number of hours the TimeEntry took."
    )
    quantity_redacted: Optional[bool] = Field(
        None,
        description="Is `true` if any of the following fields are redacted:\n`quantity`, `rounded_quantity`, `rounded_quantity_in_hours`, `quantity_in_hours`, `total`, `non_billable_total`\n",
    )
    reference: Optional[str] = Field(
        None, description="A check reference for a HardCostEntry."
    )
    rounded_quantity: Optional[float] = Field(
        None,
        description="The field is applicable to time entries only.\n\n**Version <= 4.0.3:**\nThe number of hours rounded accordingly to the billing settings.\nThe rounded value is used to calculate the total.\n\n**Latest version:**\nThe number of seconds rounded accordingly to the billing settings.\nThe rounded value is used to calculate the total.\n",
    )
    rounded_quantity_in_hours: Optional[float] = Field(
        None,
        description="The number of hours rounded accordingly to the billing settings.\nThe rounded value is used to calculate the total.\n",
    )
    tax_setting: Optional[TaxSetting] = Field(
        None,
        description="The option denoting whether primary tax, secondary tax, or both is applied to an expense entry.",
    )
    total: Optional[float] = Field(
        None,
        description="The total cost of draft, billable and billed items in the *Activity*",
    )
    type: Optional[Type1] = Field(None, description="The type of the *Activity*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Activity* was last updated (as a ISO-8601 timestamp)",
    )


class Name(Enum):
    """
    The name of the *Address*
    """

    Work = "Work"
    Home = "Home"
    Billing = "Billing"
    Other = "Other"


class AddressBase(BaseModel):
    city: Optional[str] = Field(None, description="City of the *Address*")
    country: Optional[str] = Field(None, description="Country of the *Address*")
    created_at: Optional[str] = Field(
        None, description="The time the *Address* was created (as a ISO-8601 timestamp)"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Address*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Address*")
    name: Optional[Name] = Field(None, description="The name of the *Address*")
    postal_code: Optional[str] = Field(None, description="Postal code of the *Address*")
    primary: Optional[bool] = Field(
        None, description="Whether it is the default for this contact"
    )
    province: Optional[str] = Field(
        None, description="Province or state of the *Address*"
    )
    street: Optional[str] = Field(None, description="Street of the *Address*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Address* was last updated (as a ISO-8601 timestamp)",
    )


class AllocationBase(BaseModel):
    amount: Optional[float] = Field(
        None, description="The total amount of money that the user has allocated"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *Allocation* was created (as a ISO-8601 timestamp)",
    )
    date: Optional[str] = Field(
        None, description="The date the allocation was applied (as a ISO-8601 date)"
    )
    description: Optional[str] = Field(
        None,
        description="The description from the associated Credit Memo (if applicable)",
    )
    destroyable: Optional[bool] = Field(
        None, description="Whether the record can be deleted or not"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Allocation*")
    has_online_payment: Optional[bool] = Field(
        None,
        description="Whether this allocation is associated with an online payment or not",
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *Allocation*"
    )
    interest: Optional[bool] = Field(
        None, description="Whether the allocation is applied to interest amount"
    )
    payment_type: Optional[str] = Field(
        None,
        description="A string indicating whether the payment is a card or an eCheck payment.",
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Allocation* was last updated (as a ISO-8601 timestamp)",
    )
    voided_at: Optional[str] = Field(
        None, description="Time the *Allocation* was voided (as a ISO-8601 timestamp)"
    )


class Type2(Enum):
    """
    The class name of the *Attendee*
    """

    Contact = "Contact"
    Calendar = "Calendar"


class AttendeeBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *Attendee* was created (as a ISO-8601 timestamp)",
    )
    email: Optional[str] = Field(
        None,
        description="If the Attendee is a User, this is the User's email. If the Attendee is a contact, this is the Contact's primary email address.",
    )
    enabled: Optional[bool] = Field(
        None,
        description="If the Attendee is a user, represents whether the user is enabled or disabled. Returns null if attendee is a Contact.",
    )
    etag: Optional[str] = Field(None, description="ETag for the *Attendee*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Attendee*")
    name: Optional[str] = Field(None, description="The name of the *Attendee*")
    type: Optional[Type2] = Field(None, description="The class name of the *Attendee*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Attendee* was last updated (as a ISO-8601 timestamp)",
    )


class AvatarBase(BaseModel):
    field_destroy: Optional[bool] = Field(
        None, alias="_destroy", description="Whether to destroy the *Avatar*"
    )
    created_at: Optional[str] = Field(
        None, description="The time the *Avatar* was created (as a ISO-8601 timestamp)"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Avatar*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Avatar*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Avatar* was last updated (as a ISO-8601 timestamp)",
    )
    url: Optional[str] = Field(None, description="The URL for the *Avatar*")


class Type3(Enum):
    """
    The type of Balance this data is for.
    """

    Matter = "Matter"
    Client = "Client"


class BalanceBase(BaseModel):
    amount: Optional[float] = Field(None, description="The amount for this Balance.")
    due: Optional[float] = Field(
        None,
        description="The amount due for this Balance, factoring in applicable discounts.",
    )
    id: Optional[int] = Field(None, description="Unique identifier for the *Balance*")
    interest_amount: Optional[float] = Field(
        None, description="The interest amount for this Balance."
    )
    type: Optional[Type3] = Field(
        None, description="The type of Balance this data is for."
    )


class Type4(Enum):
    """
    The type of the *BankAccount*
    """

    Operating = "Operating"
    Trust = "Trust"


class BankAccountBase(BaseModel):
    account_number: Optional[str] = Field(
        None, description="The account number for *BankAccount*"
    )
    balance: Optional[float] = Field(
        None, description="The current balance of the *BankAccount*"
    )
    bank_transactions_count: Optional[int] = Field(
        None, description="The number of bank transactions associated with the account."
    )
    clio_payment_page_link: Optional[str] = Field(
        None,
        description="Link to Single Payment Page which allows to transfer funds without logging in.",
    )
    clio_payment_page_qr_code: Optional[str] = Field(
        None,
        description="A QR code that links to a Single Payment Page which allows to transfer funds without logging in.",
    )
    clio_payments_enabled: Optional[bool] = Field(
        None, description="Whether the bank account is connected to Clio Payments"
    )
    controlled_account: Optional[bool] = Field(
        None, description="Whether is a controlled account"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *BankAccount* was created (as a ISO-8601 timestamp)",
    )
    currency: Optional[str] = Field(
        None, description="The currency type of the *BankAccount*"
    )
    default_account: Optional[bool] = Field(
        None, description="Whether it is the default account"
    )
    domicile_branch: Optional[str] = Field(
        None, description="The name of the branch where the account was opened"
    )
    etag: Optional[str] = Field(None, description="ETag for the *BankAccount*")
    general_ledger_number: Optional[str] = Field(
        None, description="General ledger number"
    )
    holder: Optional[str] = Field(
        None,
        description="The name of the person or business that owns the *BankAccount*",
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *BankAccount*"
    )
    institution: Optional[str] = Field(
        None,
        description="The financial institution where the *BankAccount* is registered",
    )
    name: Optional[str] = Field(None, description="The name of the *BankAccount*")
    swift: Optional[str] = Field(
        None, description="A unique identification code for the financial institution"
    )
    transit_number: Optional[str] = Field(
        None, description="Transit number for the bank account branch"
    )
    type: Optional[Type4] = Field(None, description="The type of the *BankAccount*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *BankAccount* was last updated (as a ISO-8601 timestamp)",
    )


class BankTransactionBase(BaseModel):
    amount: Optional[float] = Field(None, description="The amount of the transaction.")
    bank_account_id: Optional[int] = Field(
        None, description="The associated bank account."
    )
    clio_payments_transaction: Optional[bool] = Field(
        None, description="Whether the transaction was created through online payments."
    )
    confirmation: Optional[str] = Field(
        None, description="The reference code for the transaction."
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *BankTransaction* was created (as a ISO-8601 timestamp)",
    )
    currency: Optional[str] = Field(
        None, description="The currency of the transaction."
    )
    current_account_balance: Optional[float] = Field(
        None, description="The current account balance."
    )
    date: Optional[str] = Field(None, description="The date of the transaction.")
    description: Optional[str] = Field(
        None, description="The description of the transaction."
    )
    etag: Optional[str] = Field(None, description="ETag for the *BankTransaction*")
    exchange_rate: Optional[float] = Field(
        None, description="The exchange rate of the transaction."
    )
    funds_in: Optional[float] = Field(
        None, description="The amount of funds received in this transaction."
    )
    funds_out: Optional[float] = Field(
        None, description="The amount of funds withdrawn in this transaction."
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *BankTransaction*"
    )
    read_only_confirmation: Optional[bool] = Field(
        None, description="Whether the transaction's reference code is read-only."
    )
    source: Optional[str] = Field(None, description="Where the transaction came from.")
    transaction_type: Optional[str] = Field(
        None, description="What kind of transaction."
    )
    type: Optional[str] = Field(None, description="The type of the *BankTransaction*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *BankTransaction* was last updated (as a ISO-8601 timestamp)",
    )


class BankTransferBase(BaseModel):
    amount: Optional[float] = Field(None, description="The amount of the transfer.")
    created_at: Optional[str] = Field(
        None,
        description="The time the *BankTransfer* was created (as a ISO-8601 timestamp)",
    )
    date: Optional[str] = Field(None, description="The date of the transfer.")
    description: Optional[str] = Field(
        None, description="The description of the transfer."
    )
    etag: Optional[str] = Field(None, description="ETag for the *BankTransfer*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *BankTransfer*"
    )
    primary_authorizer: Optional[str] = Field(
        None, description="The primary authorizer of the transfer."
    )
    secondary_authorizer: Optional[str] = Field(
        None, description="The secondary authorizer of the transfer."
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *BankTransfer* was last updated (as a ISO-8601 timestamp)",
    )


class BillThemeBase(BaseModel):
    account_id: Optional[int] = Field(
        None, description="The account number the *BillTheme* belongs to"
    )
    config: Optional[str] = Field(
        None, description="The configuration of the *BillTheme*"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *BillTheme* was created (as a ISO-8601 timestamp)",
    )
    default: Optional[bool] = Field(
        None, description="Whether the *BillTheme* is the default for its account"
    )
    etag: Optional[str] = Field(None, description="ETag for the *BillTheme*")
    id: Optional[int] = Field(None, description="Unique identifier for the *BillTheme*")
    name: Optional[str] = Field(None, description="The name of the *BillTheme*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *BillTheme* was last updated (as a ISO-8601 timestamp)",
    )


class AvailableStateTransitions(Enum):
    """
    The available *Bill* state transitions.
    """

    awaiting_approval = "awaiting_approval"
    awaiting_payment = "awaiting_payment"
    paid = "paid"
    void = "void"
    deleted = "deleted"


class Kind(Enum):
    """
    The kind of the *Bill*
    """

    revenue_kind = "revenue_kind"
    summary_kind = "summary_kind"
    trust_kind = "trust_kind"
    aggregate_all = "aggregate_all"
    aggregate_split = "aggregate_split"
    aggregate_services = "aggregate_services"
    aggregate_expenses = "aggregate_expenses"


class State(Enum):
    """
    The billing state the *Bill* is in
    """

    draft = "draft"
    awaiting_approval = "awaiting_approval"
    awaiting_payment = "awaiting_payment"
    paid = "paid"
    void = "void"
    deleted = "deleted"


class Type5(Enum):
    """
    The type of the *Bill*
    """

    MatterBill = "MatterBill"
    ClientBill = "ClientBill"


class BillBase(BaseModel):
    available_state_transitions: Optional[AvailableStateTransitions] = Field(
        None, description="The available *Bill* state transitions."
    )
    balance: Optional[float] = Field(
        None, description="The outstanding balance of the *Bill*"
    )
    can_update: Optional[bool] = Field(
        None,
        description="This value indicates if your *Bill*'s line items and information can be updated.",
    )
    created_at: Optional[str] = Field(
        None, description="The time the *Bill* was created (as a ISO-8601 timestamp)"
    )
    credits_issued: Optional[float] = Field(
        None, description="The total credits issued for the *Bill*"
    )
    discount_services_only: Optional[str] = Field(
        None, description="The selected discount is applied to services only."
    )
    due: Optional[float] = Field(
        None,
        description="The total amount of the *Bill* with interest and less discounts",
    )
    due_at: Optional[str] = Field(
        None, description="The date the *Bill* is due (as a ISO-8601 date)"
    )
    end_at: Optional[str] = Field(
        None, description="The time the billing period ends (as a ISO-8601 date)"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Bill*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Bill*")
    issued_at: Optional[str] = Field(
        None, description="The time the *Bill* was issued (as a ISO-8601 date)"
    )
    kind: Optional[Kind] = Field(None, description="The kind of the *Bill*")
    last_sent_at: Optional[str] = Field(
        None, description="The last time the *Bill* was sent (as a ISO-8601 date)"
    )
    memo: Optional[str] = Field(None, description="A memo for the *Bill*")
    number: Optional[str] = Field(
        None, description="The *Bill* identifier (not necessarily numeric)'"
    )
    paid: Optional[float] = Field(
        None, description="The total amount paid for the *Bill*"
    )
    paid_at: Optional[str] = Field(
        None, description="The date of the last payment on the *Bill*"
    )
    pending: Optional[float] = Field(
        None, description="The amount of pending credit card payments on the *Bill*"
    )
    purchase_order: Optional[str] = Field(
        None, description="The purchase order of the *Bill*"
    )
    secondary_tax_rate: Optional[float] = Field(
        None, description="A secondary tax rate applied to the *Bill*"
    )
    secondary_tax_sum: Optional[float] = Field(
        None, description="Sum of secondary tax for the model"
    )
    secondary_taxable_sub_total: Optional[int] = Field(
        None, description="The subtotal of the bill's secondary tax"
    )
    services_secondary_tax: Optional[float] = Field(
        None,
        description="The total secondary tax of the bill's line items of a service kind",
    )
    services_secondary_taxable_sub_total: Optional[int] = Field(
        None, description="The services portion of the bill's secondary tax"
    )
    services_sub_total: Optional[float] = Field(
        None, description="The sub total of all the bill's line items of a service kind"
    )
    services_tax: Optional[float] = Field(
        None, description="The total tax of the bill's line items of a service kind"
    )
    services_taxable_sub_total: Optional[int] = Field(
        None, description="The services portion of the bill's primary tax"
    )
    shared: Optional[bool] = Field(None, description="Whether the *Bill* is a shared")
    start_at: Optional[str] = Field(
        None, description="The time the billing period starts (as a ISO-8601 date)"
    )
    state: Optional[State] = Field(
        None, description="The billing state the *Bill* is in"
    )
    sub_total: Optional[float] = Field(None, description="Sub total for the *Bill*")
    subject: Optional[str] = Field(None, description="The subject of the *Bill*")
    tax_rate: Optional[float] = Field(None, description="The tax rate to the *Bill*")
    tax_sum: Optional[float] = Field(
        None, description="Sum of primary tax for the model"
    )
    taxable_sub_total: Optional[int] = Field(
        None, description="The total taxable bill amount"
    )
    total: Optional[float] = Field(
        None, description="The total with interest of the *Bill*"
    )
    total_tax: Optional[float] = Field(
        None, description="The total amount of tax for the bill."
    )
    type: Optional[Type5] = Field(None, description="The type of the *Bill*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Bill* was last updated (as a ISO-8601 timestamp)",
    )


class BillableClientBase(BaseModel):
    amount_in_trust: Optional[float] = Field(
        None, description="The trust amount available for the client"
    )
    billable_matters_count: Optional[int] = Field(
        None, description="The total number of billable matters the client has"
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *BillableClient*"
    )
    name: Optional[str] = Field(None, description="The name of the Client")
    unbilled_amount: Optional[float] = Field(
        None, description="The unbilled amount of the client"
    )
    unbilled_hours: Optional[float] = Field(
        None, description="The unbilled hours of  the client"
    )


class BillableMatterBase(BaseModel):
    amount_in_trust: Optional[float] = Field(
        None, description="The trust amount available for the matter"
    )
    display_number: Optional[str] = Field(
        None, description="The reference to the matter"
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *BillableMatter*"
    )
    unbilled_amount: Optional[float] = Field(
        None, description="The unbilled amount for the matter"
    )
    unbilled_hours: Optional[float] = Field(
        None, description="The unbilled number of hours for the matter"
    )


class SecondaryTaxRule(Enum):
    """
    Used to determine if secondary tax should be applied separately or additionally to primary tax
    """

    Pre = "Pre"
    Post = "Post"


class BillingSettingBase(BaseModel):
    apply_tax_by_default: Optional[bool] = Field(
        None,
        description="Used to determine if primary tax should be applied to invoices by default",
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *BillingSetting* was created (as a ISO-8601 timestamp)",
    )
    currency: Optional[str] = Field(
        None, description="Current user setting of currency"
    )
    currency_sign: Optional[str] = Field(
        None, description="The sign of the current currency"
    )
    etag: Optional[str] = Field(None, description="ETag for the *BillingSetting*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *BillingSetting*"
    )
    notify_after_bill_created: Optional[bool] = Field(
        None,
        description="Flag to indicate if users should have the option to notify other users when generating a bill",
    )
    rounded_duration: Optional[float] = Field(
        None, description="Rounded equivalent of duration submitted"
    )
    rounding: Optional[int] = Field(
        None, description="Minute increment for time rounding"
    )
    secondary_tax_name: Optional[str] = Field(
        None,
        description="Name shown for secondary tax on invoices using this BillingSetting",
    )
    secondary_tax_rate: Optional[float] = Field(
        None,
        description="Rate applied for secondary tax on invoices using this BillingSetting",
    )
    secondary_tax_rule: Optional[SecondaryTaxRule] = Field(
        None,
        description="Used to determine if secondary tax should be applied separately or additionally to primary tax",
    )
    tax_name: Optional[str] = Field(
        None,
        description="Name shown for primary tax on invoices using this BillingSetting",
    )
    tax_rate: Optional[float] = Field(
        None,
        description="Rate applied for primary tax on invoices using this BillingSetting",
    )
    time_on_flat_rate_contingency_matters_is_non_billable: Optional[bool] = Field(
        None,
        description="Used to determine if hourly time entries on flat rate or contingency fee matters should be non-billable by default",
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *BillingSetting* was last updated (as a ISO-8601 timestamp)",
    )
    use_decimal_rounding: Optional[bool] = Field(
        None, description="Round time to two decimal places"
    )
    use_secondary_tax: Optional[bool] = Field(
        None,
        description="Used to determine if secondary tax applies to invoices using this BillingSetting",
    )
    use_utbms_codes: Optional[bool] = Field(
        None,
        description="Controls usage of UTBMS codes, allowing creation of coded time entries and expenses",
    )


class Color(Enum):
    """
    The color describing the *CalendarEntryEventType*
    """

    field_367B9C = "#367B9C"
    FFA5A4 = "#FFA5A4"
    field_83D17F = "#83D17F"
    FFAC7B = "#FFAC7B"
    field_8E3F64 = "#8E3F64"
    C75300 = "#C75300"
    field_009CEC = "#009CEC"
    field_62D6B1 = "#62D6B1"
    field_9EEDCB = "#9EEDCB"
    F9A2C4 = "#F9A2C4"
    field_616161 = "#616161"
    BBDA81 = "#BBDA81"
    DFD3F8 = "#DFD3F8"
    D6C4A5 = "#D6C4A5"
    FFD478 = "#FFD478"
    field_6AC9DE = "#6AC9DE"
    EABBB0 = "#EABBB0"
    BFC2E1 = "#BFC2E1"
    DADADA = "#DADADA"
    CDE2F5 = "#CDE2F5"


class CalendarEntryEventTypeBase(BaseModel):
    color: Optional[Color] = Field(
        None, description="The color describing the *CalendarEntryEventType*"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *CalendarEntryEventType* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(
        None, description="ETag for the *CalendarEntryEventType*"
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *CalendarEntryEventType*"
    )
    name: Optional[str] = Field(
        None, description="The name for the *CalendarEntryEventType*"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *CalendarEntryEventType* was last updated (as a ISO-8601 timestamp)",
    )


class CalendarEntryBase(BaseModel):
    all_day: Optional[bool] = Field(None, description="Whether the event is all day")
    calendar_owner_id: Optional[int] = Field(
        None, description="The id of the calendar owner."
    )
    court_rule: Optional[bool] = Field(
        None, description="Whether this event is associated with a Court Rule"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *CalendarEntry* was created (as a ISO-8601 timestamp)",
    )
    description: Optional[str] = Field(
        None, description="A detailed description of the *CalendarEntry*"
    )
    end_at: Optional[str] = Field(
        None, description="The time the *CalendarEntry* ends (as an ISO-8601 timestamp)"
    )
    etag: Optional[str] = Field(None, description="ETag for the *CalendarEntry*")
    id: Optional[str] = Field(
        None, description="Unique identifier for the *CalendarEntry*"
    )
    location: Optional[str] = Field(
        None, description="The geographic location of the *CalendarEntry*"
    )
    parent_calendar_entry_id: Optional[int] = Field(
        None, description="Identifier for the parent *CalendarEntry*"
    )
    permission: Optional[str] = Field(
        None,
        description="The view permission for the current user, will return 'viewer' when permission is 'limited_viewer' and the user is an attendee.",
    )
    recurrence_rule: Optional[str] = Field(
        None, description="Recurrence rule for expanding"
    )
    start_at: Optional[str] = Field(
        None,
        description="The time the *CalendarEntry* starts (as an ISO-8601 timestamp)",
    )
    start_at_time_zone: Optional[str] = Field(
        None, description="Original start at time zone of the event."
    )
    summary: Optional[str] = Field(
        None, description="A short summary of the *CalendarEntry*"
    )
    time_entries_count: Optional[int] = Field(
        None,
        description="The number of `TimeEntry` activities associated with the *CalendarEntry*",
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *CalendarEntry* was last updated (as a ISO-8601 timestamp)",
    )


class Color1(Enum):
    """
    Calendar color
    """

    field_658CDA = "#658CDA"
    DA6666 = "#DA6666"
    field_49B050 = "#49B050"
    E7804C = "#E7804C"
    field_8C66DA = "#8C66DA"
    C4A882 = "#C4A882"
    field_64AD88 = "#64AD88"
    field_84AAA5 = "#84AAA5"
    field_56BFB3 = "#56BFB3"
    E77399 = "#E77399"
    BFBF4B = "#BFBF4B"
    field_8BBF3C = "#8BBF3C"
    B473B4 = "#B473B4"
    A7A77D = "#A7A77D"
    F2A53D = "#F2A53D"
    field_658CB3 = "#658CB3"
    BE9494 = "#BE9494"
    A992A9 = "#A992A9"
    field_8897A5 = "#8897A5"
    field_93A2BE = "#93A2BE"


class LightColor(Enum):
    """
    Accent color to complement the main calendar color.
    """

    field_5DA5C7 = "#5DA5C7"
    F95957 = "#F95957"
    field_209412 = "#209412"
    FF7715 = "#FF7715"
    DE649D = "#DE649D"
    FF6B02 = "#FF6B02"
    field_56C4FC = "#56C4FC"
    field_00B177 = "#00B177"
    field_50D19B = "#50D19B"
    F14A8C = "#F14A8C"
    A3A2A2 = "#A3A2A2"
    field_84AB3B = "#84AB3B"
    B091EE = "#B091EE"
    BD9E69 = "#BD9E69"
    F2A000 = "#F2A000"
    field_00A5CA = "#00A5CA"
    CB5A3D = "#CB5A3D"
    field_959CD0 = "#959CD0"
    B0B0B0 = "#B0B0B0"
    field_7BA6CD = "#7BA6CD"


class CalendarVisibilityBase(BaseModel):
    color: Optional[Color1] = Field(None, description="Calendar color")
    created_at: Optional[str] = Field(
        None,
        description="The time the *CalendarVisibility* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *CalendarVisibility*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *CalendarVisibility*"
    )
    light_color: Optional[LightColor] = Field(
        None, description="Accent color to complement the main calendar color."
    )
    name: Optional[str] = Field(None, description="Calendar name")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *CalendarVisibility* was last updated (as a ISO-8601 timestamp)",
    )
    visible: Optional[bool] = Field(
        None,
        description="Whether the *CalendarVisibility* will be shown by default in the Clio Web UI.",
    )


class Color2(Enum):
    """
    Color
    """

    field_367B9C = "#367B9C"
    FFA5A4 = "#FFA5A4"
    field_83D17F = "#83D17F"
    FFAC7B = "#FFAC7B"
    field_8E3F64 = "#8E3F64"
    C75300 = "#C75300"
    field_009CEC = "#009CEC"
    field_62D6B1 = "#62D6B1"
    field_9EEDCB = "#9EEDCB"
    F9A2C4 = "#F9A2C4"
    field_616161 = "#616161"
    BBDA81 = "#BBDA81"
    DFD3F8 = "#DFD3F8"
    D6C4A5 = "#D6C4A5"
    FFD478 = "#FFD478"
    field_6AC9DE = "#6AC9DE"
    EABBB0 = "#EABBB0"
    BFC2E1 = "#BFC2E1"
    DADADA = "#DADADA"
    CDE2F5 = "#CDE2F5"


class Permission(Enum):
    """
    The user's permission to the *Calendar*
    """

    owner = "owner"
    editor = "editor"
    viewer = "viewer"
    limited_viewer = "limited_viewer"
    none = "none"


class Source(Enum):
    """
    The source that visible applies to, by default the Clio Web UI (Expects 'mobile' or 'web').
    """

    web = "web"
    mobile = "mobile"


class Type6(Enum):
    """
    The type of the *Calendar*
    """

    AccountCalendar = "AccountCalendar"
    AdhocCalendar = "AdhocCalendar"
    UserCalendar = "UserCalendar"


class CalendarBase(BaseModel):
    color: Optional[Color2] = Field(None, description="Color")
    court_rules_default_calendar: Optional[bool] = Field(
        None,
        description="Whether the calendar is default court rules calendar for current user",
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *Calendar* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *Calendar*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Calendar*")
    light_color: Optional[LightColor] = Field(
        None, description="Accent color to complement the main calendar color."
    )
    name: Optional[str] = Field(None, description="The name of the *Calendar*")
    permission: Optional[Permission] = Field(
        None, description="The user's permission to the *Calendar*"
    )
    source: Optional[Source] = Field(
        None,
        description="The source that visible applies to, by default the Clio Web UI (Expects 'mobile' or 'web').",
    )
    type: Optional[Type6] = Field(None, description="The type of the *Calendar*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Calendar* was last updated (as a ISO-8601 timestamp)",
    )
    visible: Optional[bool] = Field(
        None,
        description="Whether the *Calendar* will be shown by default in the Clio Web UI (assuming no source is provided).",
    )


class CascadingTaskTemplateBase(BaseModel):
    id: Optional[int] = Field(
        None, description="Unique identifier for the *TaskTemplate*"
    )
    name: Optional[str] = Field(None, description="The name of the *TaskTemplate*")


class ClientPortalBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *ClientPortal* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *ClientPortal*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *ClientPortal*"
    )
    unread_count: Optional[int] = Field(
        None, description="The number of unread count messages for the current user."
    )
    unread_notifiable_count: Optional[int] = Field(
        None,
        description="The number of unread messages for the current user once their notification settings have been applied.",
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *ClientPortal* was last updated (as a ISO-8601 timestamp)",
    )


class Type7(Enum):
    """
    The type of the *Client*
    """

    Company = "Company"
    Person = "Person"


class ClientBase(BaseModel):
    client_connect_user_id: Optional[int] = Field(
        None, description="The client connect ID of the contacts associated user"
    )
    created_at: Optional[str] = Field(
        None, description="The time the *Client* was created (as a ISO-8601 timestamp)"
    )
    date_of_birth: Optional[str] = Field(None, description="Date of Birth")
    first_name: Optional[str] = Field(None, description="First name of the Person")
    id: Optional[int] = Field(None, description="Unique identifier for the *Client*")
    initials: Optional[str] = Field(None, description="The initials of the *Client*")
    is_matter_client: Optional[bool] = Field(
        None, description="Whether or not the Client is also the client of the matter"
    )
    last_name: Optional[str] = Field(None, description="Last name of the Person")
    middle_name: Optional[str] = Field(None, description="Middle name of the Person")
    name: Optional[str] = Field(None, description="The full name of the *Client*")
    prefix: Optional[str] = Field(
        None, description="The prefix of the *Client* (Mr, Mrs, etc)"
    )
    primary_email_address: Optional[str] = Field(
        None, description="The primary email address of client"
    )
    primary_phone_number: Optional[str] = Field(
        None, description="The primary phone number of client"
    )
    title: Optional[str] = Field(
        None, description="The designated title of the *Client*"
    )
    type: Optional[Type7] = Field(None, description="The type of the *Client*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Client* was last updated (as a ISO-8601 timestamp)",
    )


class SubscriptionType(Enum):
    """
    The subscription type of the *ClioCreator*
    """

    Attorney = "Attorney"
    NonAttorney = "NonAttorney"


class Type8(Enum):
    """
    The type of the *ClioCreator*
    """

    ManageUser = "ManageUser"
    ClientUser = "ClientUser"


class ClioCreatorBase(BaseModel):
    account_owner: Optional[bool] = Field(
        None, description="Whether the *ClioCreator* is the owner of the account"
    )
    clio_connect: Optional[bool] = Field(
        None, description="Whether the *ClioCreator* is a Clio Connect user"
    )
    court_rules_default_attendee: Optional[bool] = Field(
        None,
        description="Whether the *ClioCreator* is a default attendee for court rules events",
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *ClioCreator* was created (as a ISO-8601 timestamp)",
    )
    default_calendar_id: Optional[int] = Field(
        None, description="Default calendar id for *ClioCreator*."
    )
    email: Optional[str] = Field(None, description="The email of the *ClioCreator*")
    enabled: Optional[bool] = Field(
        None, description="Whether the *ClioCreator* is allowed to log in"
    )
    etag: Optional[str] = Field(None, description="ETag for the *ClioCreator*")
    first_name: Optional[str] = Field(
        None, description="The first name of the *ClioCreator*"
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *ClioCreator*"
    )
    initials: Optional[str] = Field(
        None, description="The initials of the *ClioCreator*"
    )
    last_name: Optional[str] = Field(
        None, description="The last name of the *ClioCreator*"
    )
    name: Optional[str] = Field(None, description="The full name of the *ClioCreator*")
    phone_number: Optional[str] = Field(
        None, description="The primary phone number for the *ClioCreator*."
    )
    rate: Optional[float] = Field(
        None, description="Default user activity rate for *ClioCreator*."
    )
    roles: Optional[List[str]] = Field(
        None, description="An array of roles assigned to this *ClioCreator*"
    )
    subscription_type: Optional[SubscriptionType] = Field(
        None, description="The subscription type of the *ClioCreator*"
    )
    time_zone: Optional[str] = Field(
        None, description="The selected time zone of the *ClioCreator*"
    )
    type: Optional[Type8] = Field(None, description="The type of the *ClioCreator*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *ClioCreator* was last updated (as a ISO-8601 timestamp)",
    )


class ClioPaymentsLinkBase(BaseModel):
    active: Optional[bool] = Field(
        None, description="Whether or not the payment link is active."
    )
    amount: Optional[float] = Field(
        None, description="The defined amount of the payment link, if set."
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *ClioPaymentsLink* was created (as a ISO-8601 timestamp)",
    )
    currency: Optional[str] = Field(
        None, description="The currency the payment link will collect."
    )
    description: Optional[str] = Field(
        None, description="The defined description of the payment link, if set."
    )
    email_address: Optional[str] = Field(
        None,
        description="The email address to pre-fill the field on the the payment link, if set.",
    )
    etag: Optional[str] = Field(None, description="ETag for the *ClioPaymentsLink*")
    expires_at: Optional[str] = Field(
        None, description="The ISO 8601 date and time the payment link will expire."
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *ClioPaymentsLink*"
    )
    is_allocated_as_revenue: Optional[bool] = Field(
        None, description="Whether the payment link is allocated as revenue."
    )
    redirect_url: Optional[str] = Field(
        None,
        description="The URL to redirect the client to after the payment has been made.",
    )
    url: Optional[str] = Field(None, description="The URL of the payment link.")


class State1(Enum):
    """
    The state of the payment (authorized, completed, failed, etc).
    """

    pending = "pending"
    authorized = "authorized"
    completed = "completed"
    voided = "voided"
    failed = "failed"
    canceled = "canceled"
    requires_confirmation = "requires_confirmation"
    completed_requiring_allocation = "completed_requiring_allocation"


class ClioPaymentsPaymentBase(BaseModel):
    amount: Optional[float] = Field(None, description="The amount of the payment.")
    confirmation_number: Optional[str] = Field(
        None, description="The confirmatin number of the payment."
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *ClioPaymentsPayment* was created (as a ISO-8601 timestamp)",
    )
    currency: Optional[str] = Field(
        None, description="The currency the payment was processed in."
    )
    deposit_as_revenue: Optional[bool] = Field(
        None, description="Whether the payment was deposited as revenue."
    )
    description: Optional[str] = Field(
        None, description="The description of the payment."
    )
    email_address: Optional[str] = Field(
        None, description="The email address of the client."
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *ClioPaymentsPayment*"
    )
    state: Optional[State1] = Field(
        None,
        description="The state of the payment (authorized, completed, failed, etc).",
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *ClioPaymentsPayment* was last updated (as a ISO-8601 timestamp)",
    )


class CommentBase(BaseModel):
    created_at: Optional[str] = Field(
        None, description="The time the *Comment* was created (as a ISO-8601 timestamp)"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Comment*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Comment*")
    message: Optional[str] = Field(None, description="The content of the Comment")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Comment* was last updated (as a ISO-8601 timestamp)",
    )


class CommunicationEmlFileBase(BaseModel):
    id: Optional[int] = Field(
        None, description="Unique identifier for the *CommunicationEmlFile*"
    )


class Type9(Enum):
    """
    The type of the *Communication*
    """

    EmailCommunication = "EmailCommunication"
    PhoneCommunication = "PhoneCommunication"


class CommunicationBase(BaseModel):
    body: Optional[str] = Field(
        None, description="The main content of the *Communication*"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *Communication* was created (as a ISO-8601 timestamp)",
    )
    date: Optional[str] = Field(
        None, description="The date of the *Communication* (as a ISO-8601 datestamp)"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Communication*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *Communication*"
    )
    received_at: Optional[str] = Field(
        None, description="The date-time of the *Communication* (in ISO-8601 format)"
    )
    subject: Optional[str] = Field(
        None, description="The subject line of the *Communication*"
    )
    time_entries_count: Optional[int] = Field(
        None,
        description="The number of time_entries associated with the *Communication*",
    )
    type: Optional[Type9] = Field(None, description="The type of the *Communication*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Communication* was last updated (as a ISO-8601 timestamp)",
    )


class ConferenceMeetingBase(BaseModel):
    conference_id: Optional[int] = Field(
        None, description="Third-party provider unique meeting ID"
    )
    conference_password: Optional[str] = Field(
        None, description="Third-party provider meeting password"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *ConferenceMeeting* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *ConferenceMeeting*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *ConferenceMeeting*"
    )
    join_url: Optional[str] = Field(
        None, description="URL for participants to join the video conference"
    )
    source_id: Optional[int] = Field(
        None, description="The external ID of the video conference meeting"
    )
    type: Optional[str] = Field(None, description="The type of video conference")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *ConferenceMeeting* was last updated (as a ISO-8601 timestamp)",
    )


class Type10(Enum):
    """
    The type of the *Contact*
    """

    Company = "Company"
    Person = "Person"


class ContactBase(BaseModel):
    client_connect_user_id: Optional[int] = Field(
        None,
        description="The ID for the Clio Connect user associated with this *Contact*",
    )
    clio_connect_email: Optional[str] = Field(
        None, description="Clio Connect email if the *Contact* is a ClioConnect User"
    )
    created_at: Optional[str] = Field(
        None, description="The time the *Contact* was created (as a ISO-8601 timestamp)"
    )
    date_of_birth: Optional[str] = Field(None, description="Date of birth")
    etag: Optional[str] = Field(None, description="ETag for the *Contact*")
    first_name: Optional[str] = Field(None, description="First name of the Person")
    has_clio_for_clients_permission: Optional[bool] = Field(
        None,
        description="True if at least one resource has been shared with the contact using Clio for Clients.",
    )
    id: Optional[int] = Field(None, description="Unique identifier for the *Contact*")
    initials: Optional[str] = Field(None, description="The initials of the *Contact*")
    is_bill_recipient: Optional[bool] = Field(
        None,
        description="Whether the Contact is a bill recipient on at least one matter.",
    )
    is_client: Optional[bool] = Field(
        None, description="Whether or not the Contact is a client"
    )
    is_clio_for_client_user: Optional[bool] = Field(
        None,
        description="Whether or not this contact has client_login and client_user (can be created due to addition to client portal or client_share_permissions)",
    )
    is_co_counsel: Optional[bool] = Field(
        None, description="Whether or not the Contact has matters shared as co-counsel"
    )
    last_name: Optional[str] = Field(None, description="Last name of the Person")
    ledes_client_id: Optional[str] = Field(
        None, description="LEDES client id of the Contact"
    )
    locked_clio_connect_email: Optional[bool] = Field(
        None,
        description="A boolean indicating if the ability to modify this *Contacts Clio connect email is locked.",
    )
    middle_name: Optional[str] = Field(None, description="Middle name of the Person")
    name: Optional[str] = Field(None, description="The full name of the *Contact*")
    prefix: Optional[str] = Field(
        None, description="The prefix of the *Contact* (Mr, Mrs, etc)"
    )
    primary_email_address: Optional[str] = Field(
        None, description="The primary email address associated with this *Contact*."
    )
    primary_phone_number: Optional[str] = Field(
        None, description="The primary phone number associated with this *Contact*."
    )
    sales_tax_number: Optional[str] = Field(
        None, description="The sales tax number of the *Contact*"
    )
    secondary_email_address: Optional[str] = Field(
        None, description="The secondary email address associated with this *Contact*."
    )
    secondary_phone_number: Optional[str] = Field(
        None, description="The secondary phone number of the *Contact*."
    )
    title: Optional[str] = Field(
        None, description="The designated title of the *Contact*"
    )
    type: Optional[Type10] = Field(None, description="The type of the *Contact*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Contact* was last updated (as a ISO-8601 timestamp)",
    )


class ContingencyFeeBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *ContingencyFee* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *ContingencyFee*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *ContingencyFee*"
    )
    show_contingency_award: Optional[bool] = Field(
        None, description="Whether the *ContingencyFee* is posted or on a bill"
    )
    ed_at: Optional[str] = Field(
        None,
        description="The time the *ContingencyFee* was last updated (as a ISO-8601 timestamp)",
    )


class ConversationMembershipBase(BaseModel):
    archived: Optional[bool] = Field(
        None,
        description="Whether or not the ConversationMembership has been archived by the member",
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *ConversationMembership* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(
        None, description="ETag for the *ConversationMembership*"
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *ConversationMembership*"
    )
    read: Optional[bool] = Field(
        None,
        description="Whether or not the ConversationMembership has been read by the member",
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *ConversationMembership* was last updated (as a ISO-8601 timestamp)",
    )


class ConversationMessageBase(BaseModel):
    body: Optional[str] = Field(
        None, description="The main content of the *ConversationMessage*"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *ConversationMessage* was created (as a ISO-8601 timestamp)",
    )
    date: Optional[str] = Field(
        None,
        description="The creation date of the message in the current user's time zone",
    )
    etag: Optional[str] = Field(None, description="ETag for the *ConversationMessage*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *ConversationMessage*"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *ConversationMessage* was last updated (as a ISO-8601 timestamp)",
    )


class ConversationBase(BaseModel):
    archived: Optional[bool] = Field(
        None, description="Whether the conversation has been archived"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *Conversation* was created (as a ISO-8601 timestamp)",
    )
    current_user_is_member: Optional[bool] = Field(
        None, description="Whether the current user is a member of this conversation"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Conversation*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *Conversation*"
    )
    message_count: Optional[int] = Field(
        None, description="The number of messages in this conversation"
    )
    read: Optional[bool] = Field(
        None, description="Whether any messages in this conversation have been viewed"
    )
    read_only: Optional[bool] = Field(
        None, description="Whether the conversation is read only"
    )
    subject: Optional[str] = Field(
        None, description="The subject of the *Conversation*"
    )
    time_entries_count: Optional[int] = Field(
        None, description="The number of time entries applied to this conversation"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Conversation* was last updated (as a ISO-8601 timestamp)",
    )


class CreditMemoBase(BaseModel):
    amount: Optional[float] = Field(None, description="Total amount credited")
    created_at: Optional[str] = Field(
        None,
        description="The time the *CreditMemo* was created (as a ISO-8601 timestamp)",
    )
    date: Optional[str] = Field(
        None, description="Date the *CreditMemo* was recorded (as a ISO-8601 date)"
    )
    description: Optional[str] = Field(
        None, description="A detailed description for the *CreditMemo*"
    )
    discount: Optional[bool] = Field(
        None, description="Whether the *CreditMemo* is applied as discount"
    )
    etag: Optional[str] = Field(None, description="ETag for the *CreditMemo*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *CreditMemo*"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *CreditMemo* was last updated (as a ISO-8601 timestamp)",
    )
    voided_at: Optional[str] = Field(
        None, description="Time the *CreditMemo* was voided (as a ISO-8601 timestamp)"
    )


class CurrencyBase(BaseModel):
    code: Optional[str] = Field(None, description="ISO 4217 code for the *Currency*")
    created_at: Optional[str] = Field(
        None,
        description="The time the *Currency* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *Currency*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Currency*")
    sign: Optional[str] = Field(
        None, description="Symbol used to denote monetary values using this *Currency*"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Currency* was last updated (as a ISO-8601 timestamp)",
    )


class UiReference(Enum):
    """
    UI reference location within Clio where the link will be displayed.
    """

    activities_show = "activities/show"
    documents_show = "documents/show"
    contacts_show = "contacts/show"
    matters_show = "matters/show"
    folders_show = "folders/show"


class CustomActionBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *CustomAction* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *CustomAction*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *CustomAction*"
    )
    label: Optional[str] = Field(
        None, description="Text label to be displayed on the custom link."
    )
    target_url: Optional[str] = Field(
        None,
        description="Target URL which will be opened in a new tab when the user clicks the custom link.",
    )
    ui_reference: Optional[UiReference] = Field(
        None,
        description="UI reference location within Clio where the link will be displayed.",
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *CustomAction* was last updated (as a ISO-8601 timestamp)",
    )


class CustomFieldMatterSelectionBase(BaseModel):
    display_number: Optional[str] = Field(
        None,
        description="The reference and label of the *CustomFieldMatterSelection*. Depending on the account's manual_matter_numbering setting, this is either read only (generated) or customizable.",
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *CustomFieldMatterSelection*"
    )


class CustomFieldSetAssociationBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *CustomFieldSetAssociation* was created (as a ISO-8601 timestamp)",
    )
    display_order: Optional[int] = Field(
        None, description="The display position of the *CustomFieldSetAssociation*"
    )
    etag: Optional[str] = Field(
        None, description="ETag for the *CustomFieldSetAssociation*"
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *CustomFieldSetAssociation*"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *CustomFieldSetAssociation* was last updated (as a ISO-8601 timestamp)",
    )


class ParentType(Enum):
    """
    Type of object the *CustomFieldSet* is for.
    """

    Contact = "Contact"
    Matter = "Matter"


class CustomFieldSetBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *CustomFieldSet* was created (as a ISO-8601 timestamp)",
    )
    displayed: Optional[bool] = Field(
        None,
        description="Whether or not the *CustomFieldSet* should be displayed by default.",
    )
    etag: Optional[str] = Field(None, description="ETag for the *CustomFieldSet*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *CustomFieldSet*"
    )
    name: Optional[str] = Field(None, description="The name of the custom field set.")
    parent_type: Optional[ParentType] = Field(
        None, description="Type of object the *CustomFieldSet* is for."
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *CustomFieldSet* was last updated (as a ISO-8601 timestamp)",
    )


class FieldType(Enum):
    """
    The type of the *CustomFieldValue*
    """

    checkbox = "checkbox"
    contact = "contact"
    currency = "currency"
    date = "date"
    time = "time"
    email = "email"
    matter = "matter"
    numeric = "numeric"
    picklist = "picklist"
    text_area = "text_area"
    text_line = "text_line"
    url = "url"


class CustomFieldValueBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *CustomFieldValue* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *CustomFieldValue*")
    field_display_order: Optional[int] = Field(
        None, description="The display position of the *CustomFieldValue*"
    )
    field_displayed: Optional[bool] = Field(
        None, description="Whether the *CustomFieldValue* is displayed by default"
    )
    field_name: Optional[str] = Field(None, description="The name of the custom field")
    field_required: Optional[bool] = Field(
        None, description="Whether the *CustomFieldValue* requires a value"
    )
    field_type: Optional[FieldType] = Field(
        None, description="The type of the *CustomFieldValue*"
    )
    id: Optional[str] = Field(
        None, description="Unique identifier for the *CustomFieldValue*"
    )
    soft_deleted: Optional[bool] = Field(
        None, description="Whether the value is associated with a deleted custom field"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *CustomFieldValue* was last updated (as a ISO-8601 timestamp)",
    )
    value: Optional[str] = Field(
        None, description="The value of the *CustomFieldValue*"
    )


class FieldType1(Enum):
    """
    Field type of the *CustomField*
    """

    checkbox = "checkbox"
    contact = "contact"
    currency = "currency"
    date = "date"
    time = "time"
    email = "email"
    matter = "matter"
    numeric = "numeric"
    picklist = "picklist"
    text_area = "text_area"
    text_line = "text_line"
    url = "url"


class ParentType1(Enum):
    """
    Type of object the *CustomField* is for
    """

    Contact = "Contact"
    Matter = "Matter"


class CustomFieldBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *CustomField* was created (as a ISO-8601 timestamp)",
    )
    deleted: Optional[bool] = Field(
        None, description="Whether the *CustomField* is deleted for future use"
    )
    display_order: Optional[int] = Field(
        None, description="The display position of the *CustomField*"
    )
    displayed: Optional[bool] = Field(
        None, description="Whether the *CustomField* is displayed by default"
    )
    etag: Optional[str] = Field(None, description="ETag for the *CustomField*")
    field_type: Optional[FieldType1] = Field(
        None, description="Field type of the *CustomField*"
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *CustomField*"
    )
    name: Optional[str] = Field(None, description="The name of the *CustomField*")
    parent_type: Optional[ParentType1] = Field(
        None, description="Type of object the *CustomField* is for"
    )
    required: Optional[bool] = Field(
        None, description="Whether the *CustomField* requires a value"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *CustomField* was last updated (as a ISO-8601 timestamp)",
    )


class DamageType(Enum):
    """
    Damage type of the record
    """

    special = "special"
    general = "general"
    other = "other"


class DamageBase(BaseModel):
    amount: Optional[float] = Field(None, description="Amount for Damage")
    created_at: Optional[str] = Field(
        None, description="The time the *Damage* was created (as a ISO-8601 timestamp)"
    )
    damage_type: Optional[DamageType] = Field(
        None, description="Damage type of the record"
    )
    description: Optional[str] = Field(None, description="Description for Damage")
    etag: Optional[str] = Field(None, description="ETag for the *Damage*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Damage*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Damage* was last updated (as a ISO-8601 timestamp)",
    )


class Type11(Enum):
    """
    The type of *Discount* being applied in your *Discount* rate.
    """

    percentage = "percentage"
    money = "money"


class DiscountBase(BaseModel):
    early_payment_period: Optional[int] = Field(
        None,
        description="The number of days for your *Discount* period. If your bill is paid within this time, apply your *Discount* rate to the bill.",
    )
    early_payment_rate: Optional[int] = Field(
        None,
        description="The % discount that will be applied if your *Discount* is paid within the early payment period.",
    )
    note: Optional[str] = Field(None, description="A note for your *Discount*")
    rate: Optional[float] = Field(None, description="The rate of the *Discount%*")
    type: Optional[Type11] = Field(
        None,
        description="The type of *Discount* being applied in your *Discount* rate.",
    )


class State2(Enum):
    """
    The current state of the DocumentArchive.
    """

    not_started = "not_started"
    queued = "queued"
    in_progress = "in_progress"
    completed = "completed"
    failed = "failed"


class DocumentArchiveBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *DocumentArchive* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *DocumentArchive*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *DocumentArchive*"
    )
    message: Optional[str] = Field(
        None,
        description="A message to indicate why the DocumentArchive didn't complete.",
    )
    progress: Optional[float] = Field(
        None, description="The percent completion of the DocumentArchive."
    )
    size: Optional[int] = Field(
        None, description="The size of the DocumentArchive in bytes."
    )
    state: Optional[State2] = Field(
        None, description="The current state of the DocumentArchive."
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *DocumentArchive* was last updated (as a ISO-8601 timestamp)",
    )


class ExportFormats(Enum):
    """
    An array of what formats were requested
    """

    pdf = "pdf"
    original = "original"


class State3(Enum):
    """
    A text description of what the automation is currently doing
    """

    not_started = "not_started"
    queued = "queued"
    in_progress = "in_progress"
    empty = "empty"
    failed = "failed"
    completed = "completed"


class DocumentAutomationBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *DocumentAutomation* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *DocumentAutomation*")
    export_formats: Optional[ExportFormats] = Field(
        None, description="An array of what formats were requested"
    )
    filename: Optional[str] = Field(
        None, description="The name of the file being generated."
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *DocumentAutomation*"
    )
    state: Optional[State3] = Field(
        None, description="A text description of what the automation is currently doing"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *DocumentAutomation* was last updated (as a ISO-8601 timestamp)",
    )


class DocumentCategoryBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *DocumentCategory* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *DocumentCategory*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *DocumentCategory*"
    )
    name: Optional[str] = Field(None, description="The name of the *DocumentCategory*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *DocumentCategory* was last updated (as a ISO-8601 timestamp)",
    )


class DocumentTemplateBase(BaseModel):
    content_type: Optional[str] = Field(
        None,
        description="A standard MIME type describing the format of the object data.",
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *DocumentTemplate* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *DocumentTemplate*")
    filename: Optional[str] = Field(
        None, description="The name of the original file that was uploaded"
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *DocumentTemplate*"
    )
    size: Optional[int] = Field(None, description="The size in bytes of the template")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *DocumentTemplate* was last updated (as a ISO-8601 timestamp)",
    )


class DocumentVersionBase(BaseModel):
    content_type: Optional[str] = Field(
        None,
        description="A standard MIME type describing the format of the object data.",
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *DocumentVersion* was created (as a ISO-8601 timestamp)",
    )
    document_id: Optional[int] = Field(
        None, description="The ID of the parent document."
    )
    etag: Optional[str] = Field(None, description="ETag for the *DocumentVersion*")
    filename: Optional[str] = Field(
        None, description="The uploaded file name of the DocumentVersion."
    )
    fully_uploaded: Optional[bool] = Field(
        None,
        description="True if the DocumentVersion is uploaded. False if the DocumentVersion is being uploaded.",
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *DocumentVersion*"
    )
    put_url: Optional[str] = Field(
        None,
        description="A signed URL for uploading the file in a single operation. It expires in 10 minutes. If the document is fully uploaded, the field is empty.",
    )
    received_at: Optional[str] = Field(
        None,
        description="The time the DocumentVersion was received (as an ISO-8601 timestamp)",
    )
    size: Optional[int] = Field(
        None, description="The size of the DocumentVersion in bytes."
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *DocumentVersion* was last updated (as a ISO-8601 timestamp)",
    )
    uuid: Optional[str] = Field(
        None,
        description="UUID associated with the DocumentVersion. UUID is required to mark a document fully uploaded.",
    )
    version_number: Optional[int] = Field(
        None,
        description="The ordered number of when this DocumentVersion was uploaded.",
    )


class Type12(Enum):
    """
    The type of the *Document*
    """

    Document = "Document"


class DocumentBase(BaseModel):
    content_type: Optional[str] = Field(
        None, description="The uploaded file content type"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *Document* was created (as a ISO-8601 timestamp)",
    )
    deleted_at: Optional[str] = Field(
        None,
        description="The time the *Document* was deleted (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *Document*")
    filename: Optional[str] = Field(
        None, description="The uploaded file name of the latest document version."
    )
    id: Optional[int] = Field(None, description="Unique identifier for the *Document*")
    locked: Optional[bool] = Field(
        None,
        description="Whether or not the Document is locked. Locked Document cannot be modified",
    )
    name: Optional[str] = Field(None, description="The name of the Document")
    received_at: Optional[str] = Field(
        None,
        description="The time the last document version was received (as an ISO-8601 timestamp)",
    )
    size: Optional[int] = Field(None, description="The file size")
    type: Optional[Type12] = Field(None, description="The type of the *Document*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Document* was last updated (as a ISO-8601 timestamp)",
    )


class EmailAddressBase(BaseModel):
    address: Optional[str] = Field(
        None, description="The address of the *EmailAddress*"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *EmailAddress* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *EmailAddress*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *EmailAddress*"
    )
    name: Optional[str] = Field(
        None,
        description="A descriptive name for the *EmailAddress. Common values include `Home`, `Work`, and `Other`, as these are the only selectable options within Clio Manage, but other values may be returned for this field.",
    )
    primary: Optional[bool] = Field(
        None, description="Whether it is the default for this contact"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *EmailAddress* was last updated (as a ISO-8601 timestamp)",
    )


class ErrorDetail(BaseModel):
    message: str = Field(..., description="Detailed message about the error")
    type: str = Field(..., description="Unique name for this error")


class EventMetricsBase(BaseModel):
    unread_client_portal_messages: Optional[int] = Field(
        None,
        description="The number of unread client portal messages for the current user",
    )
    unread_mobile_events: Optional[int] = Field(
        None,
        description="The number of unread mobile event notifications for the current user",
    )
    unread_secure_messages: Optional[int] = Field(
        None, description="The number of unread secure messages for the current user"
    )
    unread_text_messages: Optional[int] = Field(
        None, description="The number of unread text messages for the current user"
    )
    unread_web_events: Optional[int] = Field(
        None,
        description="The number of unread web event notifications for the current user",
    )


class EventBase(BaseModel):
    description: Optional[str] = Field(
        None,
        description="Description or additional information about the event (e.g. Matter Description)",
    )
    description_url: Optional[str] = Field(
        None,
        description="Target URL that will be opened if the user clicks on the event description",
    )
    etag: Optional[str] = Field(None, description="ETag for the *Event*")
    icon: Optional[str] = Field(
        None, description="Font Awesome icon to display (without the fa- prefix)"
    )
    id: Optional[int] = Field(None, description="Unique identifier for the *Event*")
    message: Optional[str] = Field(
        None, description="Concise headline message describing the event"
    )
    mobile_icon: Optional[str] = Field(
        None, description="Icon to be displayed in the mobile app"
    )
    occurred_at: Optional[str] = Field(None, description="When the event occurred")
    primary_detail: Optional[str] = Field(
        None,
        description="Optional additional information about the event (e.g. Matter Client, Document Author)",
    )
    primary_detail_url: Optional[str] = Field(
        None,
        description="Target URL that will be opened if the user clicks on the primary detail",
    )
    secondary_detail: Optional[str] = Field(
        None,
        description="Optional additional information about the event (e.g. Matter Status, Document Size)",
    )
    secondary_detail_url: Optional[str] = Field(
        None,
        description="Target URL that will be opened if the user clicks on the secondary detail",
    )
    subject_id: Optional[int] = Field(
        None, description="Id of the subject that triggered the notification"
    )
    subject_type: Optional[str] = Field(
        None,
        description="The type of subject that triggered the notification (e.g. Matter, Document)",
    )
    title: Optional[str] = Field(
        None,
        description="The title or subject of the event (e.g. Matter Number, Document Title)",
    )
    title_url: Optional[str] = Field(
        None,
        description="Target URL that will be opened if the user clicks on the event title",
    )


class EvergreenRetainerBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *EvergreenRetainer* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *EvergreenRetainer*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *EvergreenRetainer*"
    )
    minimum_threshold: Optional[float] = Field(
        None,
        description="The trust balance threshold for the associated Matter. When the balance falls below the threshold, the retainer's associated recipients (firm users) will receive a notification.",
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *EvergreenRetainer* was last updated (as a ISO-8601 timestamp)",
    )


class ExpenseCategoryBase(BaseModel):
    accessible_to_user: Optional[bool] = Field(
        None, description="Determines if expense category is accessible to user"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *ExpenseCategory* was created (as a ISO-8601 timestamp)",
    )
    entry_type: Optional[str] = Field(
        None,
        description='The type of expense entry the category is associated to. Can be either "hard_cost", "soft_cost" or "unassociated"',
    )
    etag: Optional[str] = Field(None, description="ETag for the *ExpenseCategory*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *ExpenseCategory*"
    )
    name: Optional[str] = Field(None, description="The name of the expense category")
    rate: Optional[int] = Field(None, description="The price charged per unit cost")
    tax_setting: Optional[str] = Field(
        None, description="The type of tax rate applied to the expense category."
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *ExpenseCategory* was last updated (as a ISO-8601 timestamp)",
    )
    xero_expense_code: Optional[str] = Field(
        None, description="Custom Xero expense code for an expense category"
    )


class ExternalPropertyBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *ExternalProperty* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *ExternalProperty*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *ExternalProperty*"
    )
    name: Optional[str] = Field(None, description="The name of the *ExternalProperty*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *ExternalProperty* was last updated (as a ISO-8601 timestamp)",
    )
    value: Optional[str] = Field(
        None, description="The value of the *ExternalProperty*"
    )


class Type13(Enum):
    """
    The type of the *Folder*
    """

    Folder = "Folder"


class FolderBase(BaseModel):
    created_at: Optional[str] = Field(
        None, description="The time the *Folder* was created (as a ISO-8601 timestamp)"
    )
    deleted_at: Optional[str] = Field(
        None, description="The time the *Folder* was deleted (as a ISO-8601 timestamp)"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Folder*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Folder*")
    locked: Optional[bool] = Field(
        None,
        description="Whether or not the Folder is locked. Locked Folder cannot be modified",
    )
    name: Optional[str] = Field(None, description="The name of the Folder")
    root: Optional[bool] = Field(
        None,
        description="Whether or not the Folder is the root folder. There is only one root folder per account",
    )
    type: Optional[Type13] = Field(None, description="The type of the *Folder*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Folder* was last updated (as a ISO-8601 timestamp)",
    )


class GrantFundingSourceBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *GrantFundingSource* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *GrantFundingSource*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *GrantFundingSource*"
    )
    name: Optional[str] = Field(
        None, description="The name of the *GrantFundingSource*"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *GrantFundingSource* was last updated (as a ISO-8601 timestamp)",
    )


class GrantBase(BaseModel):
    balance: Optional[str] = Field(None, description="Balance of the grant")
    created_at: Optional[str] = Field(
        None, description="The time the *Grant* was created (as a ISO-8601 timestamp)"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Grant*")
    funding_code: Optional[str] = Field(None, description="Funding code of the grant")
    funding_code_and_name: Optional[str] = Field(
        None, description="Funding code and name of the grant"
    )
    funding_source_name: Optional[str] = Field(
        None, description="Name of the funding source of the grant"
    )
    id: Optional[int] = Field(None, description="Unique identifier for the *Grant*")
    name: Optional[str] = Field(None, description="The name of the *Grant*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Grant* was last updated (as a ISO-8601 timestamp)",
    )


class Type14(Enum):
    """
    The type of the *Group*
    """

    UserGroup = "UserGroup"
    AdhocGroup = "AdhocGroup"
    AccountGroup = "AccountGroup"
    TeamGroup = "TeamGroup"


class GroupBase(BaseModel):
    client_connect_user: Optional[bool] = Field(
        None,
        description="Whether or not the Group is a UserGroup for a Clio Connect User",
    )
    etag: Optional[str] = Field(None, description="ETag for the *Group*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Group*")
    name: Optional[str] = Field(None, description="The name of the *Group*")
    type: Optional[Type14] = Field(None, description="The type of the *Group*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Group* was last updated (as a ISO-8601 timestamp)",
    )


class Name1(Enum):
    """
    The type of *InstantMessenger* it is
    """

    Work = "Work"
    Personal = "Personal"
    Other = "Other"


class InstantMessengerBase(BaseModel):
    address: Optional[str] = Field(
        None, description="The address of the *InstantMessenger*"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *InstantMessenger* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *InstantMessenger*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *InstantMessenger*"
    )
    name: Optional[Name1] = Field(
        None, description="The type of *InstantMessenger* it is"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *InstantMessenger* was last updated (as a ISO-8601 timestamp)",
    )


class InterestChargeBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *InterestCharge* was created (as a ISO-8601 timestamp)",
    )
    date: Optional[str] = Field(
        None, description="The *InterestCharge* date (as a ISO-8601 date)"
    )
    description: Optional[str] = Field(
        None, description="The description for the *InterestCharge*"
    )
    etag: Optional[str] = Field(None, description="ETag for the *InterestCharge*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *InterestCharge*"
    )
    total: Optional[float] = Field(
        None, description="The total amount for the *InterestCharge*"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *InterestCharge* was last updated (as a ISO-8601 timestamp)",
    )


class Type15(Enum):
    """
    Type of *Interest%* being applied
    """

    simple = "simple"
    compound = "compound"


class InterestBase(BaseModel):
    balance: Optional[float] = Field(
        None, description="Interest balance for the object"
    )
    period: Optional[int] = Field(
        None,
        description="Number of days that represent the frequency which your *Interest%* will be applied",
    )
    rate: Optional[float] = Field(None, description="Rate for the *Interest%*")
    total: Optional[float] = Field(None, description="Interest total for the object")
    type: Optional[Type15] = Field(
        None, description="Type of *Interest%* being applied"
    )


class Type16(Enum):
    """
    The type of the *Item*
    """

    Document = "Document"
    Folder = "Folder"


class ItemBase(BaseModel):
    created_at: Optional[str] = Field(
        None, description="The time the *Item* was created (as a ISO-8601 timestamp)"
    )
    deleted_at: Optional[str] = Field(
        None, description="The time the *Item* was deleted (as a ISO-8601 timestamp)"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Item*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Item*")
    locked: Optional[bool] = Field(
        None,
        description="Whether or not the Item is locked. Locked Item cannot be modified",
    )
    name: Optional[str] = Field(None, description="The name of the Item")
    type: Optional[Type16] = Field(None, description="The type of the *Item*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Item* was last updated (as a ISO-8601 timestamp)",
    )


class JobTitleBase(BaseModel):
    etag: Optional[str] = Field(None, description="ETag for the *JobTitle*")
    id: Optional[int] = Field(None, description="Unique identifier for the *JobTitle*")
    initials: Optional[str] = Field(None, description="Initials of the job title")
    name: Optional[str] = Field(None, description="Name of the job title")


class JurisdictionBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *Jurisdiction* was created (as a ISO-8601 timestamp)",
    )
    default: Optional[bool] = Field(
        None, description="Whether the *Jurisdiction* is default for the current user"
    )
    description: Optional[str] = Field(None, description="Description")
    display_timezone: Optional[str] = Field(
        None, description="Formatted IANA timezone with UTC offset"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Jurisdiction*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *Jurisdiction*"
    )
    is_local_timezone: Optional[bool] = Field(
        None,
        description="Boolean value for when the timezone is in the local users timezone",
    )
    system_id: Optional[int] = Field(None, description="Server ID")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Jurisdiction* was last updated (as a ISO-8601 timestamp)",
    )
    valid_subscription: Optional[bool] = Field(
        None, description="Boolean value for whether the user has the jurisdictions"
    )


class JurisdictionsToTriggerBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *JurisdictionsToTrigger* was created (as a ISO-8601 timestamp)",
    )
    description: Optional[str] = Field(
        None, description="A detailed description of the *JurisdictionsToTrigger*"
    )
    do_not_recalculate: Optional[bool] = Field(
        None, description="Whether the associated dates should not be recalculated"
    )
    etag: Optional[str] = Field(
        None, description="ETag for the *JurisdictionsToTrigger*"
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *JurisdictionsToTrigger*"
    )
    is_requirements_required: Optional[bool] = Field(
        None, description="Whether the trigger has requirements"
    )
    is_served: Optional[bool] = Field(
        None, description="Whether the user must select a Date Offset (Service Type)"
    )
    system_id: Optional[int] = Field(None, description="Server id")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *JurisdictionsToTrigger* was last updated (as a ISO-8601 timestamp)",
    )


class LaukCivilCertificatedRateBase(BaseModel):
    activity: Optional[str] = Field(
        None, description="Activity of the *LaukCivilCertificatedRate*"
    )
    activity_sub_category: Optional[str] = Field(
        None, description="Activity sub-category"
    )
    activity_type: Optional[str] = Field(None, description="Activity type")
    attended_several_hearings_for_multiple_clients: Optional[bool] = Field(
        None, description="Multiple hearings for multiple clients indicator"
    )
    category_of_law: Optional[str] = Field(None, description="Category of law")
    change_of_solicitor: Optional[bool] = Field(
        None, description="Change of solicitor indicator"
    )
    court: Optional[str] = Field(None, description="Court associated")
    created_at: Optional[str] = Field(
        None,
        description="The time the *LaukCivilCertificatedRate* was created (as a ISO-8601 timestamp)",
    )
    eligible_for_sqm: Optional[bool] = Field(
        None, description="SQM eligibility (Legal Aid England and Wales)"
    )
    etag: Optional[str] = Field(
        None, description="ETag for the *LaukCivilCertificatedRate*"
    )
    exceptional: Optional[Decimal] = Field(
        None, description="Fee applied for high activity count"
    )
    exceptional_warning: Optional[str] = Field(
        None, description="Warning for exceptional status"
    )
    fee: Optional[Decimal] = Field(None, description="Fee amount")
    fee_scheme: Optional[str] = Field(None, description="Fee scheme")
    first_conducting_solicitor: Optional[bool] = Field(
        None, description="First conducting solicitor indicator"
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *LaukCivilCertificatedRate*"
    )
    key: Optional[str] = Field(None, description="Unique key")
    number_of_clients: Optional[str] = Field(None, description="Number of clients")
    party: Optional[str] = Field(None, description="Associated party")
    post_transfer_clients_represented: Optional[str] = Field(
        None, description="Post-transfer clients represented"
    )
    rate_type: Optional[str] = Field(None, description="Rate type")
    region: Optional[str] = Field(None, description="Region")
    session_type: Optional[str] = Field(None, description="Session type")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *LaukCivilCertificatedRate* was last updated (as a ISO-8601 timestamp)",
    )
    user_type: Optional[str] = Field(None, description="User type")


class LaukCivilControlledRateBase(BaseModel):
    activity: Optional[str] = Field(
        None, description="Activity of the *LaukCivilControlledRate*"
    )
    activity_type: Optional[str] = Field(None, description="Activity type")
    category_of_law: Optional[str] = Field(None, description="Category of law")
    created_at: Optional[str] = Field(
        None,
        description="The time the *LaukCivilControlledRate* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(
        None, description="ETag for the *LaukCivilControlledRate*"
    )
    exceptional: Optional[Decimal] = Field(
        None, description="Fee applied for high activity count"
    )
    fee: Optional[Decimal] = Field(None, description="Fee amount")
    fee_scheme: Optional[str] = Field(None, description="Fee scheme")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *LaukCivilControlledRate*"
    )
    key: Optional[str] = Field(None, description="Unique key")
    rate_type: Optional[str] = Field(None, description="Rate type")
    region: Optional[str] = Field(None, description="Region")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *LaukCivilControlledRate* was last updated (as a ISO-8601 timestamp)",
    )


class LaukCriminalControlledRateBase(BaseModel):
    activity: Optional[str] = Field(
        None, description="Activity of the *LaukCriminalControlledRate*"
    )
    activity_type: Optional[str] = Field(None, description="Activity type")
    category_of_law: Optional[str] = Field(None, description="Category of law")
    counsel: Optional[str] = Field(None, description="Associated counsel")
    court: Optional[str] = Field(None, description="Court associated")
    created_at: Optional[str] = Field(
        None,
        description="The time the *LaukCriminalControlledRate* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(
        None, description="ETag for the *LaukCriminalControlledRate*"
    )
    exceptional: Optional[Decimal] = Field(
        None, description="Fee applied for high activity count"
    )
    fee: Optional[Decimal] = Field(None, description="Fee amount")
    fee_scheme: Optional[str] = Field(None, description="Fee scheme")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *LaukCriminalControlledRate*"
    )
    key: Optional[str] = Field(None, description="Unique key")
    post_sept_22_exceptional: Optional[Decimal] = Field(
        None, description="Post-Sept 22 exceptional fee"
    )
    post_sept_22_fee: Optional[Decimal] = Field(
        None, description="Post-Sept 22 fee amount"
    )
    rate_type: Optional[str] = Field(None, description="Rate type")
    region: Optional[str] = Field(None, description="Region")
    solicitor_type: Optional[str] = Field(None, description="Solicitor type")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *LaukCriminalControlledRate* was last updated (as a ISO-8601 timestamp)",
    )


class LaukExpenseCategoryBase(BaseModel):
    certificated: Optional[bool] = Field(
        None, description="Certificated boolean identifier for expense"
    )
    civil: Optional[bool] = Field(
        None, description="Civil boolean identifier for expense"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *LaukExpenseCategory* was created (as a ISO-8601 timestamp)",
    )
    criminal: Optional[bool] = Field(
        None, description="Criminal boolean identifier for expense"
    )
    etag: Optional[str] = Field(None, description="ETag for the *LaukExpenseCategory*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *LaukExpenseCategory*"
    )
    key: Optional[str] = Field(None, description="Unique key")
    name: Optional[str] = Field(None, description="Expense name")
    rate: Optional[Decimal] = Field(
        None, description="Determines rate based on region param"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *LaukExpenseCategory* was last updated (as a ISO-8601 timestamp)",
    )


class LegalAidUkBillBase(BaseModel):
    additional_travel_payment: Optional[bool] = Field(
        None, description="Additional travel payment, for Legal Aid England and Wales"
    )
    adjourned_hearing_fee: Optional[str] = Field(
        None, description="Adjourned hearing fee"
    )
    advice_time: Optional[int] = Field(None, description="Advice time")
    advocacy_costs: Optional[float] = Field(None, description="Advocacy costs")
    bill_type: Optional[int] = Field(None, description="Bill type")
    case_concluded: Optional[str] = Field(None, description="Case concluded")
    case_stage_level: Optional[int] = Field(None, description="Case stage level")
    cla_exemption_code: Optional[str] = Field(None, description="CLA exemption code")
    cla_reference: Optional[str] = Field(None, description="CLA reference")
    cmrh_oral: Optional[int] = Field(None, description="CMRH oral")
    cmrh_telephone: Optional[int] = Field(None, description="CMRH telephone")
    cost_of_counsel: Optional[str] = Field(None, description="Cost of counsel")
    costs_are_those_of: Optional[int] = Field(None, description="Costs are those of")
    court_location: Optional[str] = Field(
        None, description="Court location (HPCDS matters)"
    )
    date_of_claim: Optional[str] = Field(None, description="Date of claim")
    designated_accredited_representative: Optional[int] = Field(
        None, description="Designated accredited representative"
    )
    detention_travel_and_waiting_costs: Optional[str] = Field(
        None, description="Detention travel & waiting costs ex VAT"
    )
    disbursements_vat: Optional[float] = Field(None, description="Disbursements VAT")
    exceptional_case_funding_reference: Optional[str] = Field(
        None, description="Exceptional case funding reference"
    )
    exemption_criteria_satisfied: Optional[int] = Field(
        None, description="Exemption criteria satisfied"
    )
    follow_on_work: Optional[int] = Field(None, description="Follow on work")
    ho_interview: Optional[int] = Field(None, description="HO interview")
    ho_ucn: Optional[int] = Field(None, description="HO UCN")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *LegalAidUkBill*"
    )
    independent_medical_reports_claimed: Optional[str] = Field(
        None, description="Independent medical reports claimed"
    )
    jr_form_filling: Optional[str] = Field(
        None, description="JR/Form filling ex VAT, for Legal Aid England and Wales"
    )
    maat_id: Optional[str] = Field(None, description="MAAT ID")
    meetings_attended: Optional[int] = Field(None, description="Meetings attended")
    mht_ref_no: Optional[str] = Field(None, description="MHT reference number")
    net_disbursements: Optional[float] = Field(None, description="Net disbursements")
    net_profit_costs: Optional[float] = Field(None, description="Net profit cost")
    niat_disbursement_prior_authority_number: Optional[str] = Field(
        None, description="NIAT disbursement prior authority number"
    )
    number_of_attendances: Optional[int] = Field(
        None, description="Number of attendances"
    )
    outcome_for_the_client: Optional[int] = Field(
        None, description="Outcome for the client"
    )
    prior_authority_reference: Optional[str] = Field(
        None, description="Prior authority reference number"
    )
    profit_costs_ex_vat: Optional[int] = Field(None, description="Profit costs ex VAT")
    representation_order_date: Optional[str] = Field(
        None, description="Representation order date"
    )
    stage_reached: Optional[int] = Field(None, description="Stage reached")
    substantive_hearing: Optional[int] = Field(None, description="Substantive hearing")
    travel_and_waiting_costs: Optional[float] = Field(
        None, description="Travel & waiting costs"
    )
    travel_time: Optional[int] = Field(None, description="Travel time")
    value_of_costs: Optional[str] = Field(None, description="Value of costs")
    waiting_time: Optional[int] = Field(None, description="Waiting time")


class LienType(Enum):
    """
    Lien type
    """

    general = "general"
    medical_payer = "medical_payer"
    medical_provider = "medical_provider"


class LienBase(BaseModel):
    amount: Optional[float] = Field(None, description="The amount for Lien")
    created_at: Optional[str] = Field(
        None, description="The time the *Lien* was created (as a ISO-8601 timestamp)"
    )
    description: Optional[str] = Field(None, description="Lien description")
    etag: Optional[str] = Field(None, description="ETag for the *Lien*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Lien*")
    lien_type: Optional[LienType] = Field(None, description="Lien type")
    mark_as_lien: Optional[bool] = Field(None, description="Mark item as Lien")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Lien* was last updated (as a ISO-8601 timestamp)",
    )


class LineItemTotalsBase(BaseModel):
    discount_percent: Optional[float] = Field(
        None, description="Sum of discount as percentage for included line items."
    )
    price: Optional[float] = Field(
        None, description="Sum of price for included line items."
    )
    quantity: Optional[float] = Field(
        None, description="Sum of quantity for included line items."
    )
    sub_total: Optional[float] = Field(
        None, description="Sum of total before discount and tax is applied."
    )
    total: Optional[float] = Field(
        None, description="Sum of total for included line items."
    )


class Kind1(Enum):
    """
    The kind of *LineItem*
    """

    Service = "Service"
    Expense = "Expense"


class Type17(Enum):
    """
    The type of the *LineItem*
    """

    ActivityLineItem = "ActivityLineItem"
    LineItem = "LineItem"
    NoChargeLineItem = "NoChargeLineItem"
    SummaryLineItem = "SummaryLineItem"


class LineItemBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *LineItem* was created (as a ISO-8601 timestamp)",
    )
    date: Optional[str] = Field(
        None, description="The *LineItem* date (as a ISO-8601 date)"
    )
    description: Optional[str] = Field(
        None, description="The description for the *LineItem*"
    )
    etag: Optional[str] = Field(None, description="ETag for the *LineItem*")
    group_ordering: Optional[int] = Field(
        None,
        description="The value to specify the ordering of the *LineItem* on a bill",
    )
    id: Optional[int] = Field(None, description="Unique identifier for the *LineItem*")
    kind: Optional[Kind1] = Field(None, description="The kind of *LineItem*")
    note: Optional[str] = Field(None, description="The note attached to the *LineItem*")
    price: Optional[float] = Field(None, description="The price of the *LineItem*")
    quantity: Optional[float] = Field(
        None, description="The amount of hours for the *LineItem*"
    )
    secondary_tax: Optional[float] = Field(
        None, description="The secondary tax amount for the *LineItem*"
    )
    secondary_taxable: Optional[bool] = Field(
        None, description="Whether the *LineItem* is secondary taxable"
    )
    sub_total: Optional[float] = Field(
        None, description="The subtotal amount for the *LineItem*"
    )
    tax: Optional[float] = Field(None, description="The tax amount for the *LineItem*")
    taxable: Optional[bool] = Field(
        None, description="Whether the *LineItem* is taxable"
    )
    total: Optional[float] = Field(
        None, description="The total amount for the *LineItem*"
    )
    type: Optional[Type17] = Field(None, description="The type of the *LineItem*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *LineItem* was last updated (as a ISO-8601 timestamp)",
    )


class Type18(Enum):
    """
    The type of the *Folder*
    """

    Folder = "Folder"


class LinkedFolderBase(BaseModel):
    created_at: Optional[str] = Field(
        None, description="The time the *Folder* was created (as a ISO-8601 timestamp)"
    )
    deleted_at: Optional[str] = Field(
        None, description="The time the *Folder* was deleted (as a ISO-8601 timestamp)"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Folder*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Folder*")
    locked: Optional[bool] = Field(
        None,
        description="Whether or not the Folder is locked. Locked Folder cannot be modified",
    )
    name: Optional[str] = Field(None, description="The name of the *Folder*")
    root: Optional[bool] = Field(
        None,
        description="Whether or not the Folder is the root folder. There is only one root folder per account",
    )
    type: Optional[Type18] = Field(None, description="The type of the *Folder*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Folder* was last updated (as a ISO-8601 timestamp)",
    )


class Type19(Enum):
    """
    The type of the *LogEntry*
    """

    MatterLogEntry = "MatterLogEntry"
    ContactLogEntry = "ContactLogEntry"


class LogEntryBase(BaseModel):
    accessed_at: Optional[str] = Field(
        None,
        description="The time the item was last accessed (as a ISO-8601 timestamp)",
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *LogEntry* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *LogEntry*")
    id: Optional[int] = Field(None, description="Unique identifier for the *LogEntry*")
    type: Optional[Type19] = Field(None, description="The type of the *LogEntry*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *LogEntry* was last updated (as a ISO-8601 timestamp)",
    )


class MatterBalanceBase(BaseModel):
    amount: Optional[float] = Field(
        None, description="The amount of balance of a matter."
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *MatterBalance*"
    )


class MatterBillRecipientBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *MatterBillRecipient* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *MatterBillRecipient*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *MatterBillRecipient*"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *MatterBillRecipient* was last updated (as a ISO-8601 timestamp)",
    )


class MatterBudgetBase(BaseModel):
    budget: Optional[float] = Field(
        None, description="The amount allocated for the matter."
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *MatterBudget* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *MatterBudget*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *MatterBudget*"
    )
    include_expenses: Optional[bool] = Field(
        None, description="Whether the budget includes expenses."
    )
    notification_threshold: Optional[int] = Field(
        None,
        description="Percentage of the budget when it starts notifying users. The number must be between 0 and 100.",
    )
    notify_users: Optional[bool] = Field(
        None,
        description="Whether to notify users when the matter reaches the notification threshold.",
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *MatterBudget* was last updated (as a ISO-8601 timestamp)",
    )


class Type20(Enum):
    """
    The type of the *MatterContacts*
    """

    Company = "Company"
    Person = "Person"


class MatterContactsBase(BaseModel):
    client_connect_user_id: Optional[int] = Field(
        None, description="The client connect ID of the contacts associated user"
    )
    contact_created_at: Optional[str] = Field(
        None, description="Timestamp of the time the contact was created"
    )
    contact_updated_at: Optional[str] = Field(
        None, description="Timestamp of the time the contact was created"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *MatterContacts* was created (as a ISO-8601 timestamp)",
    )
    description: Optional[str] = Field(None, description="Description of the matter")
    etag: Optional[str] = Field(None, description="ETag for the *MatterContacts*")
    first_name: Optional[str] = Field(None, description="First name of the Person")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *MatterContacts*"
    )
    initials: Optional[str] = Field(
        None, description="The initials of the *MatterContacts*"
    )
    is_client: Optional[bool] = Field(
        None, description="Whether or not the MatterContacts is a client"
    )
    last_name: Optional[str] = Field(None, description="Last name of the Person")
    matter_id: Optional[int] = Field(None, description="ID of the matter")
    matter_number: Optional[str] = Field(None, description="Number of the matter")
    middle_name: Optional[str] = Field(None, description="Middle name of the Person")
    name: Optional[str] = Field(
        None, description="The full name of the *MatterContacts*"
    )
    prefix: Optional[str] = Field(
        None, description="The prefix of the *MatterContacts* (Mr, Mrs, etc)"
    )
    primary_email_address: Optional[str] = Field(
        None,
        description="The primary email address associated with this *MatterContacts*.",
    )
    primary_phone_number: Optional[str] = Field(
        None,
        description="The primary phone number associated with this *MatterContacts*.",
    )
    relationship_name: Optional[str] = Field(
        None,
        description='The description of the relation between the contact and the matter, or "Client" if the user is the client.',
    )
    secondary_email_address: Optional[str] = Field(
        None, description="The secondary email address of the contact"
    )
    secondary_phone_number: Optional[str] = Field(
        None, description="The secondary phone number of the contact"
    )
    title: Optional[str] = Field(
        None, description="The designated title of the *MatterContacts*"
    )
    type: Optional[Type20] = Field(None, description="The type of the *MatterContacts*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *MatterContacts* was last updated (as a ISO-8601 timestamp)",
    )


class Event(Enum):
    matter_created = "matter.created"


class Payload(BaseModel):
    custom_fields: Optional[Dict[str, Any]] = Field(
        None, description="Dynamic map of custom field values, e.g., date_of_incident"
    )
    display_number: Optional[str] = None
    id: Optional[int] = Field(None, description="The ID of the created matter")
    practice_area: Optional[str] = None


class MatterCreatedWebhookEvent(BaseModel):
    event: Optional[Event] = None
    payload: Optional[Payload] = None
    timestamp: Optional[str] = None


class Type21(Enum):
    """
    The type of the *MatterCustomRate*
    """

    FlatRate = "FlatRate"
    HourlyRate = "HourlyRate"
    ContingencyFee = "ContingencyFee"


class MatterCustomRateBase(BaseModel):
    on_invoice: Optional[bool] = Field(
        None,
        description="Specifies if the matter's associated activity is posted or on a bill.",
    )
    type: Optional[Type21] = Field(
        None, description="The type of the *MatterCustomRate*"
    )


class MatterDocketBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *MatterDocket* was created (as a ISO-8601 timestamp)",
    )
    deleted_at: Optional[str] = Field(
        None,
        description="The time the *MatterDocket* was deleted (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *MatterDocket*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *MatterDocket*"
    )
    name: Optional[str] = Field(None, description="The name of the *MatterDocket*")
    start_date: Optional[str] = Field(
        None, description="The date the *MatterDocket* will start (as a ISO-8601 date)"
    )
    start_time: Optional[str] = Field(
        None,
        description="The time the *MatterDocket* will start, required for specific triggers (as a ISO-8601 timestamp)",
    )
    status: Optional[str] = Field(
        None, description="The status of the *MatterDocket* creation"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *MatterDocket* was last updated (as a ISO-8601 timestamp)",
    )


class MatterStageBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *MatterStage* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *MatterStage*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *MatterStage*"
    )
    name: Optional[str] = Field(None, description="The name of the *MatterStage*")
    order: Optional[int] = Field(
        None, description="The order of the matter stage within a practice area"
    )
    practice_area_id: Optional[str] = Field(None, description="Practice Area ID")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *MatterStage* was last updated (as a ISO-8601 timestamp)",
    )


class BillingMethod(Enum):
    """
    Billing method of this matter
    """

    flat = "flat"
    contingency = "contingency"
    hourly = "hourly"


class Status(Enum):
    """
    The current status of the *Matter*
    """

    Pending = "Pending"
    Open = "Open"
    Closed = "Closed"


class MatterBase(BaseModel):
    billable: Optional[bool] = Field(
        None, description="Whether this matter is billable"
    )
    billing_method: Optional[BillingMethod] = Field(
        None, description="Billing method of this matter"
    )
    client_id: Optional[int] = Field(None, description="Client ID")
    client_reference: Optional[str] = Field(
        None, description="Client Reference string for external uses"
    )
    close_date: Optional[str] = Field(
        None, description="The date the matter was set to closed (as a ISO-8601 date)"
    )
    created_at: Optional[str] = Field(
        None, description="The time the *Matter* was created (as a ISO-8601 timestamp)"
    )
    custom_number: Optional[str] = Field(
        None, description="User defined custom number of the *Matter*"
    )
    description: Optional[str] = Field(
        None, description="The detailed description of the *Matter*"
    )
    display_number: Optional[str] = Field(
        None,
        description="The reference and label of the *Matter*. Depending on the account's manual_matter_numbering setting, this is either read only (generated) or customizable.",
    )
    etag: Optional[str] = Field(None, description="ETag for the *Matter*")
    has_tasks: Optional[bool] = Field(
        None, description="Whether or not the matter has any tasks."
    )
    id: Optional[int] = Field(None, description="Unique identifier for the *Matter*")
    last_activity_date: Optional[str] = Field(
        None,
        description="The greatest date out of all of the activities on the matter (as a ISO-8601 date)",
    )
    location: Optional[str] = Field(None, description="The location of the *Matter*")
    maildrop_address: Optional[str] = Field(
        None, description="A unique Maildrop email address for the matter"
    )
    matter_stage_updated_at: Optional[str] = Field(
        None,
        description="The date the matter stage was last updated (as a ISO-8601 date)",
    )
    number: Optional[int] = Field(
        None, description="The number given to the *Matter* within an account"
    )
    open_date: Optional[str] = Field(
        None, description="The date the matter was set to open (as a ISO-8601 date)"
    )
    pending_date: Optional[str] = Field(
        None, description="The date the matter was set to pending (as a ISO-8601 date)"
    )
    shared: Optional[bool] = Field(
        None, description="Whether the matter is currently shared with Clio Connect"
    )
    status: Optional[Status] = Field(
        None, description="The current status of the *Matter*"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Matter* was last updated (as a ISO-8601 timestamp)",
    )


class MedicalBillBase(BaseModel):
    adjustment: Optional[float] = Field(None, description="Adjustment for Medical Bill")
    amount: Optional[float] = Field(None, description="Amount for Medical Bill")
    bill_date: Optional[str] = Field(
        None, description="Bill date for Medical Bill (as a ISO-8601 date)"
    )
    bill_received_date: Optional[str] = Field(
        None, description="Bill received date for Medical Bill (as a ISO-8601 date)"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *MedicalBill* was created (as a ISO-8601 timestamp)",
    )
    damage_type: Optional[str] = Field(None, description="Damage Type")
    document_id: Optional[int] = Field(
        None, description="The id of the document associated with the Medical Bill"
    )
    etag: Optional[str] = Field(None, description="ETag for the *MedicalBill*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *MedicalBill*"
    )
    name: Optional[str] = Field(None, description="Name of the Medical Bill")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *MedicalBill* was last updated (as a ISO-8601 timestamp)",
    )


class MedicalRecordBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *MedicalRecord* was created (as a ISO-8601 timestamp)",
    )
    document_id: Optional[int] = Field(
        None, description="The id of the document associated with the Medical Record"
    )
    end_date: Optional[str] = Field(
        None, description="End date for *MedicalRecord* (as a ISO-8601 date)"
    )
    etag: Optional[str] = Field(None, description="ETag for the *MedicalRecord*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *MedicalRecord*"
    )
    start_date: Optional[str] = Field(
        None, description="Start date for *MedicalRecord* (as a ISO-8601 date)"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *MedicalRecord* was last updated (as a ISO-8601 timestamp)",
    )


class BillsStatus(Enum):
    """
    Medical Bills status
    """

    not_yet_requested = "not_yet_requested"
    requested = "requested"
    received = "received"
    incomplete = "incomplete"
    certified = "certified"


class RecordsStatus(Enum):
    """
    Medical Records status
    """

    not_yet_requested = "not_yet_requested"
    requested = "requested"
    received = "received"
    incomplete = "incomplete"
    certified = "certified"


class MedicalRecordsRequestBase(BaseModel):
    bills_follow_up_date: Optional[str] = Field(
        None, description="Follow up date for Medical Bills (as a ISO-8601 date)"
    )
    bills_request_date: Optional[str] = Field(
        None,
        description="Date for when the Medical Bills were requested (as a ISO-8601 date)",
    )
    bills_status: Optional[BillsStatus] = Field(
        None, description="Medical Bills status"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *MedicalRecordsRequest* was created (as a ISO-8601 timestamp)",
    )
    description: Optional[str] = Field(
        None, description="Description of the Medical Records Detail"
    )
    etag: Optional[str] = Field(
        None, description="ETag for the *MedicalRecordsRequest*"
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *MedicalRecordsRequest*"
    )
    in_treatment: Optional[bool] = Field(
        None, description="Treatment status for Medical Records Detail"
    )
    records_follow_up_date: Optional[str] = Field(
        None, description="Follow up date for Medical Records (as a ISO-8601 date)"
    )
    records_request_date: Optional[str] = Field(
        None,
        description="Date for when the Medical Records were requested (as a ISO-8601 date)",
    )
    records_status: Optional[RecordsStatus] = Field(
        None, description="Medical Records status"
    )
    treatment_end_date: Optional[str] = Field(
        None,
        description="Treatment end date for Medical Records Detail (as a ISO-8601 date)",
    )
    treatment_start_date: Optional[str] = Field(
        None,
        description="Treatment start date for Medical Records Detail (as a ISO-8601 date)",
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *MedicalRecordsRequest* was last updated (as a ISO-8601 timestamp)",
    )


class MultipartHeaderBase(BaseModel):
    name: Optional[str] = Field(
        None, description="Required HTTP header field name for uploading."
    )
    value: Optional[str] = Field(
        None, description="Required HTTP header field value for uploading."
    )


class MultipartBase(BaseModel):
    part_number: Optional[int] = Field(
        None,
        description="Unique identifier of a part which defines its position within the document being uploaded.",
    )
    put_url: Optional[str] = Field(
        None,
        description="A signed URL for uploading the file part. It expires in 10 minutes.",
    )


class MyEventBase(BaseModel):
    pass


class Type22(Enum):
    """
    The type of the *Note*
    """

    Matter = "Matter"
    Contact = "Contact"


class NoteBase(BaseModel):
    created_at: Optional[str] = Field(
        None, description="The time the *Note* was created (as a ISO-8601 timestamp)"
    )
    date: Optional[str] = Field(
        None, description="The date the *Note* is for (as a ISO-8601 date)"
    )
    detail: Optional[str] = Field(None, description="The body of the *Note*")
    etag: Optional[str] = Field(None, description="ETag for the *Note*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Note*")
    subject: Optional[str] = Field(None, description="The subject of the *Note*")
    time_entries_count: Optional[int] = Field(
        None, description="The number of time_entries associated with the *Note*"
    )
    type: Optional[Type22] = Field(None, description="The type of the *Note*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Note* was last updated (as a ISO-8601 timestamp)",
    )


class NotificationEventSubscriberBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *NotificationEventSubscriber* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(
        None, description="ETag for the *NotificationEventSubscriber*"
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *NotificationEventSubscriber*"
    )
    name: Optional[str] = Field(
        None,
        description="The User name added as a notification event subscriber to the NotificationEventSubscriber",
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *NotificationEventSubscriber* was last updated (as a ISO-8601 timestamp)",
    )
    user_id: Optional[int] = Field(
        None,
        description="The unique identifier for a User added as a notification event subscriber to the NotificationEventSubscriber",
    )


class Type23(Enum):
    """
    Human readable description of the type of notification
    """

    Email = "Email"
    Popup = "Popup"
    SMS = "SMS"


class NotificationMethodBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *NotificationMethod* was created (as a ISO-8601 timestamp)",
    )
    email_address: Optional[str] = Field(
        None,
        description="Email address to send the notification to (only for email type)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *NotificationMethod*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *NotificationMethod*"
    )
    is_default_email_address: Optional[bool] = Field(
        None,
        description="A boolean that is returned only on notification method objects that are relevant e.g. Email notification or Alternative Email",
    )
    type: Optional[Type23] = Field(
        None, description="Human readable description of the type of notification"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *NotificationMethod* was last updated (as a ISO-8601 timestamp)",
    )


class OutstandingClientBalanceBase(BaseModel):
    associated_matter_ids: Optional[List[int]] = Field(
        None,
        description="An array of Matter IDs associated with bills in the unpaid state",
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *OutstandingClientBalance* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(
        None, description="ETag for the *OutstandingClientBalance*"
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *OutstandingClientBalance*"
    )
    last_payment_date: Optional[str] = Field(
        None,
        description="The date the most recent payment from the contact was received",
    )
    last_shared_date: Optional[str] = Field(
        None,
        description="The date of the most recently shared bills through the outstanding balance table",
    )
    newest_issued_bill_due_date: Optional[str] = Field(
        None, description="The due date of the contact's newest bill"
    )
    pending_payments_total: Optional[float] = Field(
        None,
        description="The sum of all online payments in a pending state on the outstanding bills",
    )
    reminders_enabled: Optional[bool] = Field(
        None, description="The status of automated reminders for this client"
    )
    total_outstanding_balance: Optional[float] = Field(
        None, description="The sum of all bills in the unpaid state"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *OutstandingClientBalance* was last updated (as a ISO-8601 timestamp)",
    )


class Type24(Enum):
    """
    The type of the Participant. Person and Company are subtypes of Contact
    """

    Person = "Person"
    Company = "Company"
    User = "User"


class ParticipantBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *Participant* was created (as a ISO-8601 timestamp)",
    )
    enabled: Optional[bool] = Field(
        None,
        description="The enabled state of the *Participant* record. Always 'null' if *Participant* type is Contact",
    )
    etag: Optional[str] = Field(None, description="ETag for the *Participant*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *Participant*"
    )
    identifier: Optional[str] = Field(
        None, description="A string to identify the *Participant*"
    )
    initials: Optional[str] = Field(
        None, description="A  string with the participant initials"
    )
    job_title_name: Optional[str] = Field(
        None,
        description="the job title name of the participant if they are a firm user and have one",
    )
    name: Optional[str] = Field(
        None, description="The name of the *Participant* record"
    )
    secondary_identifier: Optional[str] = Field(
        None, description="A secondary string to identify the *Participant*"
    )
    type: Optional[Type24] = Field(
        None,
        description="The type of the Participant. Person and Company are subtypes of Contact",
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Participant* was last updated (as a ISO-8601 timestamp)",
    )


class InterestType(Enum):
    """
    The type of interest to be calculated for the *PaymentProfile (Simple or Compound)
    """

    simple = "simple"
    compound = "compound"


class PaymentProfileBase(BaseModel):
    billing_setting_id: Optional[int] = Field(
        None, description="The unique identifier for the *PaymentProfile"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *PaymentProfile* was created (as a ISO-8601 timestamp)",
    )
    discount_period: Optional[int] = Field(
        None, description="The early payment discount period for the *PaymentProfile"
    )
    discount_rate: Optional[float] = Field(
        None, description="The early payment discount rate for the *PaymentProfile"
    )
    etag: Optional[str] = Field(None, description="ETag for the *PaymentProfile*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *PaymentProfile*"
    )
    interest_period: Optional[int] = Field(
        None, description="The interest period interval for the *PaymentProfile"
    )
    interest_rate: Optional[float] = Field(
        None, description="The interest rate for the *PaymentProfile"
    )
    interest_type: Optional[InterestType] = Field(
        None,
        description="The type of interest to be calculated for the *PaymentProfile (Simple or Compound)",
    )
    name: Optional[str] = Field(None, description="The name of the *PaymentProfile")
    terms: Optional[int] = Field(
        None, description="The total grace period for the *PaymentProfile"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *PaymentProfile* was last updated (as a ISO-8601 timestamp)",
    )


class Name2(Enum):
    """
    The type of *PhoneNumber* it is
    """

    Work = "Work"
    Personal = "Personal"
    Other = "Other"


class PhoneNumberBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *PhoneNumber* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *PhoneNumber*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *PhoneNumber*"
    )
    name: Optional[Name2] = Field(None, description="The type of *PhoneNumber* it is")
    number: Optional[str] = Field(None, description="Contact's Phone Number")
    primary: Optional[bool] = Field(
        None, description="Whether it is default for this contact"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *PhoneNumber* was last updated (as a ISO-8601 timestamp)",
    )


class PicklistOptionBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *PicklistOption* was created (as a ISO-8601 timestamp)",
    )
    deleted_at: Optional[str] = Field(
        None,
        description="The time the *PicklistOption* was deleted (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *PicklistOption*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *PicklistOption*"
    )
    option: Optional[str] = Field(None, description="The value of the *PicklistOption*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *PicklistOption* was last updated (as a ISO-8601 timestamp)",
    )


class PolymorphicCustomRateActivityDescriptionBase(BaseModel):
    etag: Optional[str] = Field(None, description="ETag for the *ActivityDescription*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *ActivityDescription*"
    )
    name: Optional[str] = Field(
        None, description="The name of the *ActivityDescription*"
    )


class PolymorphicCustomRateGroupBase(BaseModel):
    etag: Optional[str] = Field(None, description="ETag for the *Group*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Group*")
    name: Optional[str] = Field(None, description="The name of the *Group*")


class PolymorphicCustomRateUserBase(BaseModel):
    enabled: Optional[bool] = Field(
        None, description="Whether the *User* is allowed to log in"
    )
    etag: Optional[str] = Field(None, description="ETag for the *User*")
    id: Optional[int] = Field(None, description="Unique identifier for the *User*")
    name: Optional[str] = Field(None, description="The full name of the *User*")


class PolymorphicCustomRateBase(BaseModel):
    award: Optional[float] = Field(
        None, description="The value of the ContingencyFee award."
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *PolymorphicCustomRate* was created (as a ISO-8601 timestamp)",
    )
    date: Optional[str] = Field(
        None, description="The date of the ContingencyFee award."
    )
    etag: Optional[str] = Field(
        None, description="ETag for the *PolymorphicCustomRate*"
    )
    id: Optional[int] = Field(
        None, description="The unique identifier for the custom rate"
    )
    note: Optional[str] = Field(
        None, description="Details about the ContingencyFee award."
    )
    rate: Optional[float] = Field(
        None,
        description="If `custom_rate.type` is `HourlyRate`, it is the dollar amount of the custom rate of the User or Group for the Matter.\n\nIf `custom_rate.type` is `FlatRate`, it is the dollar amount of the custom flat rate for the Matter.\n\nIf `custom_rate.type` is `ContingencyFee`, it is the percentage of the contingency fee awarded to the user for the Matter. The value may also be expressed as string that represents a rational number such as `1/3`.\n\nIf the user does not have sufficient rate visibility, the rates are hidden.\n",
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *PolymorphicCustomRate* was last updated (as a ISO-8601 timestamp)",
    )


class Type25(Enum):
    """
    The type of the *PolymorphicObject*
    """

    Task = "Task"
    CalendarEntry = "CalendarEntry"
    MatterNote = "MatterNote"
    ContactNote = "ContactNote"
    Matter = "Matter"
    Contact = "Contact"
    User = "User"
    CreditMemo = "CreditMemo"
    Payment = "Payment"


class PolymorphicObjectBase(BaseModel):
    id: Optional[int] = Field(
        None, description="Unique identifier for the *PolymorphicObject*"
    )
    identifier: Optional[str] = Field(
        None, description="A string to identify the *PolymorphicObject*"
    )
    secondary_identifier: Optional[str] = Field(
        None, description="A secondary string to identify the *PolymorphicObject*"
    )
    tertiary_identifier: Optional[str] = Field(
        None, description="A tertiary string to identify the *PolymorphicObject*"
    )
    type: Optional[Type25] = Field(
        None, description="The type of the *PolymorphicObject*"
    )


class Category(Enum):
    """
    The practice area category associated with the *PracticeArea*
    """

    school_injury = "school_injury"
    general_negligence = "general_negligence"
    medical_malpractice = "medical_malpractice"
    other = "other"
    personal_injury = "personal_injury"
    auto_accident = "auto_accident"
    workers_compensation = "workers_compensation"
    premises_liability = "premises_liability"


class PracticeAreaBase(BaseModel):
    category: Optional[Category] = Field(
        None,
        description="The practice area category associated with the *PracticeArea*",
    )
    code: Optional[str] = Field(None, description="The code of the *PracticeArea*")
    created_at: Optional[str] = Field(
        None,
        description="The time the *PracticeArea* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *PracticeArea*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *PracticeArea*"
    )
    name: Optional[str] = Field(None, description="The name of the *PracticeArea*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *PracticeArea* was last updated (as a ISO-8601 timestamp)",
    )


class Type26(Enum):
    """
    The type of the *RelatedContacts*
    """

    Company = "Company"
    Person = "Person"


class RelatedContactsBase(BaseModel):
    client_connect_user_id: Optional[int] = Field(
        None, description="The client connect ID of the contacts associated user"
    )
    contact_id: Optional[int] = Field(
        None, description="The id of the *RelatedContacts*"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *RelatedContacts* was created (as a ISO-8601 timestamp)",
    )
    first_name: Optional[str] = Field(None, description="First name of the Person")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *RelatedContacts*"
    )
    initials: Optional[str] = Field(
        None, description="The initials of the *RelatedContacts*"
    )
    is_matter_client: Optional[bool] = Field(
        None,
        description="Whether or not the RelatedContacts is also the client of the matter",
    )
    last_name: Optional[str] = Field(None, description="Last name of the Person")
    middle_name: Optional[str] = Field(None, description="Middle name of the Person")
    name: Optional[str] = Field(
        None, description="The full name of the *RelatedContacts*"
    )
    prefix: Optional[str] = Field(
        None, description="The prefix of the *RelatedContacts* (Mr, Mrs, etc)"
    )
    primary_email_address: Optional[str] = Field(
        None, description="The primary email address of related contact"
    )
    primary_phone_number: Optional[str] = Field(
        None, description="The primary phone number of related contact"
    )
    title: Optional[str] = Field(
        None, description="The designated title of the *RelatedContacts*"
    )
    type: Optional[Type26] = Field(
        None, description="The type of the *RelatedContacts*"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *RelatedContacts* was last updated (as a ISO-8601 timestamp)",
    )


class RelationshipBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *Relationship* was created (as a ISO-8601 timestamp)",
    )
    description: Optional[str] = Field(
        None, description="A detailed description of the *Relationship*"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Relationship*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *Relationship*"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Relationship* was last updated (as a ISO-8601 timestamp)",
    )


class NotificationType(Enum):
    """
    The type of method to be notified by
    """

    Email = "Email"
    Popup = "Popup"


class ReminderTemplateBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *ReminderTemplate* was created (as a ISO-8601 timestamp)",
    )
    duration: Optional[int] = Field(
        None, description="The time in minutes to remind user before the subject."
    )
    etag: Optional[str] = Field(None, description="ETag for the *ReminderTemplate*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *ReminderTemplate*"
    )
    notification_type: Optional[NotificationType] = Field(
        None, description="The type of method to be notified by"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *ReminderTemplate* was last updated (as a ISO-8601 timestamp)",
    )


class State4(Enum):
    """
    The current state of the *Reminder*
    """

    initializing = "initializing"
    scheduling = "scheduling"
    rescheduling = "rescheduling"
    scheduled = "scheduled"
    attempting_delivery = "attempting_delivery"
    delivery_failed = "delivery_failed"
    delivered = "delivered"
    delivery_skipped = "delivery_skipped"
    invalid_user = "invalid_user"


class ReminderBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *Reminder* was created (as a ISO-8601 timestamp)",
    )
    duration: Optional[int] = Field(
        None, description="Time in minutes to remind user before the subject"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Reminder*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Reminder*")
    next_delivery_at: Optional[str] = Field(
        None,
        description="The time the *Reminder* will be delivered (as a ISO-8601 timestamp)",
    )
    state: Optional[State4] = Field(
        None, description="The current state of the *Reminder*"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Reminder* was last updated (as a ISO-8601 timestamp)",
    )


class Category1(Enum):
    """
    The category of the report the preset generates
    """

    billing = "billing"
    client = "client"
    compliance = "compliance"
    financial = "financial"
    matter = "matter"
    online_payments = "online_payments"
    productivity = "productivity"
    revenue = "revenue"
    task = "task"


class Format(Enum):
    """
    The format of the report the preset generates
    """

    csv = "csv"
    html = "html"
    json = "json"
    pdf = "pdf"
    xlsx = "xlsx"
    zip = "zip"


class Kind2(Enum):
    """
    The kind of report the preset generates
    """

    accounts_receivable = "accounts_receivable"
    accounts_receivable_aging = "accounts_receivable_aging"
    bank_account_activity = "bank_account_activity"
    billing_history = "billing_history"
    billing_rate = "billing_rate"
    client_activity = "client_activity"
    client_ledger = "client_ledger"
    clio_payments_deposit = "clio_payments_deposit"
    clio_payments_ledger = "clio_payments_ledger"
    clio_payments_monthly_statement = "clio_payments_monthly_statement"
    clio_payments_sales_tax = "clio_payments_sales_tax"
    clio_payments_transaction = "clio_payments_transaction"
    contact_information = "contact_information"
    disbursement_payment = "disbursement_payment"
    fee_allocation = "fee_allocation"
    general_ledger = "general_ledger"
    grant_matters = "grant_matters"
    invoice_payments_v2 = "invoice_payments_v2"
    law_society_of_alberta = "law_society_of_alberta"
    law_society_of_alberta_al = "law_society_of_alberta_al"
    law_society_of_alberta_bar = "law_society_of_alberta_bar"
    law_society_of_alberta_tl = "law_society_of_alberta_tl"
    law_society_of_alberta_tt = "law_society_of_alberta_tt"
    matter = "matter"
    matter_balance_summary = "matter_balance_summary"
    matter_productivity_by_user = "matter_productivity_by_user"
    matters_by_responsible_attorney = "matters_by_responsible_attorney"
    originating_attorney_revenue = "originating_attorney_revenue"
    other_revenue = "other_revenue"
    productivity_by_client = "productivity_by_client"
    productivity_by_user = "productivity_by_user"
    revenue = "revenue"
    task_productivity_by_user = "task_productivity_by_user"
    task_progress_by_user = "task_progress_by_user"
    trust_ledger = "trust_ledger"
    trust_ledger_nsw = "trust_ledger_nsw"
    trust_listing = "trust_listing"
    trust_management = "trust_management"
    work_in_progress = "work_in_progress"


class ReportPresetBase(BaseModel):
    category: Optional[Category1] = Field(
        None, description="The category of the report the preset generates"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *ReportPreset* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *ReportPreset*")
    format: Optional[Format] = Field(
        None, description="The format of the report the preset generates"
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *ReportPreset*"
    )
    kind: Optional[Kind2] = Field(
        None, description="The kind of report the preset generates"
    )
    last_generated_at: Optional[str] = Field(
        None,
        description="The time of the last generated report from this preset (as a ISO-8601 timestamp)",
    )
    name: Optional[str] = Field(
        None, description="A specified name for the report preset"
    )
    options: Optional[str] = Field(None, description="The report options parameters")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *ReportPreset* was last updated (as a ISO-8601 timestamp)",
    )


class Frequency(Enum):
    """
    How often the Report Schedule is run
    """

    daily = "daily"
    weekly = "weekly"
    monthly = "monthly"


class Status1(Enum):
    """
    The status of the Report Schedule
    """

    initial = "initial"
    queued = "queued"
    processing = "processing"
    failed = "failed"
    completed = "completed"


class ReportScheduleBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *ReportSchedule* was created (as a ISO-8601 timestamp)",
    )
    day_of_month: Optional[int] = Field(
        None,
        description="If the frequency is monthly, which day of the month the Report Schedule is run. 32 is used to represent the last day of the month.",
    )
    days_of_week: Optional[List[int]] = Field(
        None,
        description="If the frequency is weekly, which days of the week the Report Schedule is run. Values are 0 to 6, representing Sunday to Saturday.",
    )
    effective_from: Optional[str] = Field(
        None,
        description="The date the Report Schedule will become enabled (a ISO-8601 date)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *ReportSchedule*")
    every_no_of_months: Optional[int] = Field(
        None,
        description="If the frequency is monthly, how many months between each run of the Report Schedule",
    )
    frequency: Optional[Frequency] = Field(
        None, description="How often the Report Schedule is run"
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *ReportSchedule*"
    )
    next_scheduled_date: Optional[str] = Field(
        None, description="The next time the Report Schedule should run"
    )
    report_preset_id: Optional[int] = Field(
        None,
        description="The unique identifier of the Report Preset to use when generating the scheduled report",
    )
    status: Optional[Status1] = Field(
        None, description="The status of the Report Schedule"
    )
    status_updated_at: Optional[str] = Field(
        None, description="When the status of the Report Schedule was last updated"
    )
    time_of_day: Optional[str] = Field(
        None, description="What time the Report Schedule is run"
    )
    time_zone: Optional[str] = Field(
        None,
        description="Used in conjunction with `time_of_day` to determine when the Report Schedule should run",
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *ReportSchedule* was last updated (as a ISO-8601 timestamp)",
    )


class Category2(Enum):
    """
    The category of the report
    """

    billing = "billing"
    client = "client"
    compliance = "compliance"
    financial = "financial"
    matter = "matter"
    online_payments = "online_payments"
    productivity = "productivity"
    revenue = "revenue"
    task = "task"


class Format1(Enum):
    """
    The requested format of the report
    """

    csv = "csv"
    html = "html"
    json = "json"
    pdf = "pdf"
    xlsx = "xlsx"
    zip = "zip"


class Kind3(Enum):
    """
    The kind of report to generate
    """

    accounts_receivable = "accounts_receivable"
    accounts_receivable_aging = "accounts_receivable_aging"
    bank_account_activity = "bank_account_activity"
    billing_history = "billing_history"
    billing_rate = "billing_rate"
    client_activity = "client_activity"
    client_ledger = "client_ledger"
    clio_payments_deposit = "clio_payments_deposit"
    clio_payments_ledger = "clio_payments_ledger"
    clio_payments_monthly_statement = "clio_payments_monthly_statement"
    clio_payments_sales_tax = "clio_payments_sales_tax"
    clio_payments_transaction = "clio_payments_transaction"
    contact_information = "contact_information"
    disbursement_payment = "disbursement_payment"
    fee_allocation = "fee_allocation"
    general_ledger = "general_ledger"
    grant_matters = "grant_matters"
    invoice_payments_v2 = "invoice_payments_v2"
    law_society_of_alberta = "law_society_of_alberta"
    law_society_of_alberta_al = "law_society_of_alberta_al"
    law_society_of_alberta_bar = "law_society_of_alberta_bar"
    law_society_of_alberta_tl = "law_society_of_alberta_tl"
    law_society_of_alberta_tt = "law_society_of_alberta_tt"
    matter = "matter"
    matter_balance_summary = "matter_balance_summary"
    matter_productivity_by_user = "matter_productivity_by_user"
    matters_by_responsible_attorney = "matters_by_responsible_attorney"
    originating_attorney_revenue = "originating_attorney_revenue"
    other_revenue = "other_revenue"
    productivity_by_client = "productivity_by_client"
    productivity_by_user = "productivity_by_user"
    revenue = "revenue"
    task_productivity_by_user = "task_productivity_by_user"
    task_progress_by_user = "task_progress_by_user"
    trust_ledger = "trust_ledger"
    trust_ledger_nsw = "trust_ledger_nsw"
    trust_listing = "trust_listing"
    trust_management = "trust_management"
    work_in_progress = "work_in_progress"


class Source1(Enum):
    """
    The source of the report
    """

    reports = "reports"
    presets = "presets"
    scheduled = "scheduled"


class State5(Enum):
    """
    The current state of the report
    """

    not_started = "not_started"
    queued = "queued"
    in_progress = "in_progress"
    failed = "failed"
    completed = "completed"
    empty = "empty"


class ReportBase(BaseModel):
    category: Optional[Category2] = Field(
        None, description="The category of the report"
    )
    created_at: Optional[str] = Field(
        None, description="The time the *Report* was created (as a ISO-8601 timestamp)"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Report*")
    format: Optional[Format1] = Field(
        None, description="The requested format of the report"
    )
    id: Optional[int] = Field(None, description="Unique identifier for the *Report*")
    kind: Optional[Kind3] = Field(None, description="The kind of report to generate")
    name: Optional[str] = Field(None, description="A specified name for the report")
    progress: Optional[int] = Field(
        None, description="The integer percentage of how complete the report is."
    )
    source: Optional[Source1] = Field(None, description="The source of the report")
    state: Optional[State5] = Field(None, description="The current state of the report")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Report* was last updated (as a ISO-8601 timestamp)",
    )


class ServiceTypeBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *ServiceType* was created (as a ISO-8601 timestamp)",
    )
    default: Optional[bool] = Field(
        None, description="Whether *ServiceType* is default for the current user"
    )
    description: Optional[str] = Field(
        None, description="A detailed description of the *ServiceType*"
    )
    etag: Optional[str] = Field(None, description="ETag for the *ServiceType*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *ServiceType*"
    )
    system_id: Optional[int] = Field(None, description="Server ID")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *ServiceType* was last updated (as a ISO-8601 timestamp)",
    )


class StatuteOfLimitationsComputeRequest(BaseModel):
    date_of_incident: str = Field(
        ..., description="The date when the incident occurred."
    )


class StatuteOfLimitationsComputeResponse(BaseModel):
    due_at: str = Field(
        ..., description="The calculated statute of limitations due date."
    )


class TaskTemplateListInstanceBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *TaskTemplateListInstance* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(
        None, description="ETag for the *TaskTemplateListInstance*"
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *TaskTemplateListInstace*"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *TaskTemplateListInstace* was last updated (as a ISO-8601 timestamp)",
    )


class TaskTemplateListBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *TaskTemplateList* was created (as a ISO-8601 timestamp)",
    )
    description: Optional[str] = Field(
        None, description="A detailed description of the *TaskTemplateList*"
    )
    etag: Optional[str] = Field(None, description="ETag for the *TaskTemplateList*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *TaskTemplateList*"
    )
    name: Optional[str] = Field(None, description="The name of the *TaskTemplateList*")
    templates_count: Optional[int] = Field(
        None,
        description="How many task templates exist as an association to the *TaskTemplateList*",
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *TaskTemplateList* was last updated (as a ISO-8601 timestamp)",
    )


class Priority(Enum):
    """
    *TaskTemplate* priority
    """

    High = "High"
    Normal = "Normal"
    Low = "Low"


class TaskTemplateBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *TaskTemplate* was created (as a ISO-8601 timestamp)",
    )
    description: Optional[str] = Field(
        None, description="A detailed description of the *TaskTemplate*"
    )
    etag: Optional[str] = Field(None, description="ETag for the *TaskTemplate*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *TaskTemplate*"
    )
    name: Optional[str] = Field(None, description="The name of the *TaskTemplate*")
    priority: Optional[Priority] = Field(None, description="*TaskTemplate* priority")
    private: Optional[bool] = Field(
        None, description="Whether the *TaskTemplate* is private."
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *TaskTemplate* was last updated (as a ISO-8601 timestamp)",
    )


class TaskTypeBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *TaskType* was created (as a ISO-8601 timestamp)",
    )
    deleted_at: Optional[str] = Field(
        None,
        description="The time the *TaskType* was deleted (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *TaskType*")
    id: Optional[int] = Field(None, description="Unique identifier for the *TaskType*")
    name: Optional[str] = Field(None, description="The name of the *TaskType*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *TaskType* was last updated (as a ISO-8601 timestamp)",
    )


class Priority1(Enum):
    """
    The priority of the *Task*
    """

    High = "High"
    Normal = "Normal"
    Low = "Low"


class Status2(Enum):
    """
    Status of the *Task*. (Note that users without advanced tasks can only have either complete or pending)
    """

    pending = "pending"
    in_progress = "in_progress"
    in_review = "in_review"
    complete = "complete"


class TaskBase(BaseModel):
    completed_at: Optional[str] = Field(
        None, description="The time the *Task* was completed (as a ISO-8601 timestamp)"
    )
    created_at: Optional[str] = Field(
        None, description="The time the *Task* was created (as a ISO-8601 timestamp)"
    )
    description: Optional[str] = Field(
        None, description="A detailed description of the *Task*"
    )
    due_at: Optional[str] = Field(
        None, description="The date the *Task* is due (as a ISO-8601 date)"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Task*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Task*")
    name: Optional[str] = Field(None, description="The name of the *Task*")
    notify_completion: Optional[bool] = Field(
        None, description="Whether to notify the assigner of the task's completion"
    )
    permission: Optional[str] = Field(None, description="The permission of the *Task*")
    priority: Optional[Priority1] = Field(
        None, description="The priority of the *Task*"
    )
    status: Optional[Status2] = Field(
        None,
        description="Status of the *Task*. (Note that users without advanced tasks can only have either complete or pending)",
    )
    statute_of_limitations: Optional[bool] = Field(
        None, description="Whether the task is a statute of limitations"
    )
    time_entries_count: Optional[int] = Field(
        None, description="The number of time entries associated with this task"
    )
    time_estimated: Optional[int] = Field(
        None, description="Time the *Task* should take to complete"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Task* was last updated (as a ISO-8601 timestamp)",
    )


class TextSnippetBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *TextSnippet* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *TextSnippet*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *TextSnippet*"
    )
    phrase: Optional[str] = Field(
        None, description="The phrase the abbreviation should be expanded to"
    )
    snippet: Optional[str] = Field(
        None, description="The abbreviation that should be expanded"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *TextSnippet* was last updated (as a ISO-8601 timestamp)",
    )
    whole_word: Optional[bool] = Field(
        None,
        description="Whether the *TextSnippet* abbreviation requires a space after it has been entered to expand to a phrase",
    )


class TimerBase(BaseModel):
    created_at: Optional[str] = Field(
        None, description="The time the *Timer* was created (as a ISO-8601 timestamp)"
    )
    elapsed_time: Optional[float] = Field(
        None,
        description="How much time has elapsed, in hours, since the timer was started",
    )
    etag: Optional[str] = Field(None, description="ETag for the *Timer*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Timer*")
    start_time: Optional[str] = Field(
        None, description="The time the *Timer* was started (as ISO-8601 timestamp)"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Timer* was last updated (as a ISO-8601 timestamp)",
    )


class TrustLineItemBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *TrustLineItem* was created (as a ISO-8601 timestamp)",
    )
    date: Optional[str] = Field(
        None, description="The date of the *TrustLineItem* (as a ISO-8601 date)"
    )
    etag: Optional[str] = Field(None, description="ETag for the *TrustLineItem*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *TrustLineItem*"
    )
    note: Optional[str] = Field(None, description="Note for the *TrustLineItem*")
    total: Optional[float] = Field(
        None, description="The total amount for the *TrustLineItem*"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *TrustLineItem* was last updated (as a ISO-8601 timestamp)",
    )


class TrustRequestBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *TrustRequest* was created (as a ISO-8601 timestamp)",
    )
    etag: Optional[str] = Field(None, description="ETag for the *TrustRequest*")
    id: Optional[int] = Field(
        None, description="Unique identifier for the *TrustRequest*"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *TrustRequest* was last updated (as a ISO-8601 timestamp)",
    )


class UnredactedParticipantBase(BaseModel):
    pass


class SubscriptionType1(Enum):
    """
    The subscription type of the *User*
    """

    Attorney = "Attorney"
    NonAttorney = "NonAttorney"


class UserBase(BaseModel):
    account_owner: Optional[bool] = Field(
        None, description="Whether the *User* is the owner of the account"
    )
    clio_connect: Optional[bool] = Field(
        None, description="Whether the *User* is a Clio Connect user"
    )
    court_rules_default_attendee: Optional[bool] = Field(
        None,
        description="Whether the *User* is a default attendee for court rules events",
    )
    created_at: Optional[str] = Field(
        None, description="The time the *User* was created (as a ISO-8601 timestamp)"
    )
    default_calendar_id: Optional[int] = Field(
        None, description="Default calendar id for *User*."
    )
    email: Optional[str] = Field(None, description="The email of the *User*")
    enabled: Optional[bool] = Field(
        None, description="Whether the *User* is allowed to log in"
    )
    etag: Optional[str] = Field(None, description="ETag for the *User*")
    first_name: Optional[str] = Field(None, description="The first name of the *User*")
    id: Optional[int] = Field(None, description="Unique identifier for the *User*")
    initials: Optional[str] = Field(None, description="The initials of the *User*")
    last_name: Optional[str] = Field(None, description="The last name of the *User*")
    name: Optional[str] = Field(None, description="The full name of the *User*")
    phone_number: Optional[str] = Field(
        None, description="The primary phone number for the *User*."
    )
    rate: Optional[float] = Field(
        None, description="Default user activity rate for *User*."
    )
    roles: Optional[List[str]] = Field(
        None, description="An array of roles assigned to this *User*"
    )
    subscription_type: Optional[SubscriptionType1] = Field(
        None, description="The subscription type of the *User*"
    )
    time_zone: Optional[str] = Field(
        None, description="The selected time zone of the *User*"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *User* was last updated (as a ISO-8601 timestamp)",
    )


class Type27(Enum):
    """
    The type of the *UtbmsCode*
    """

    UtbmsTask = "UtbmsTask"
    UtbmsExpense = "UtbmsExpense"
    UtbmsActivity = "UtbmsActivity"


class UtbmsCodeBase(BaseModel):
    code: Optional[str] = Field(None, description="The UTBMS code for the *UtbmsCode*")
    created_at: Optional[str] = Field(
        None,
        description="The time the *UtbmsCode* was created (as a ISO-8601 timestamp)",
    )
    description: Optional[str] = Field(
        None, description="The UTBMS description for the *UtbmsCode*"
    )
    etag: Optional[str] = Field(None, description="ETag for the *UtbmsCode*")
    id: Optional[int] = Field(None, description="Unique identifier for the *UtbmsCode*")
    name: Optional[str] = Field(None, description="The name of the *UtbmsCode*")
    type: Optional[Type27] = Field(None, description="The type of the *UtbmsCode*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *UtbmsCode* was last updated (as a ISO-8601 timestamp)",
    )
    utbms_set_id: Optional[int] = Field(None, description="Set id for the *UtbmsCode*")


class UtbmsSetBase(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description="The time the *UtbmsSet* was created (as a ISO-8601 timestamp)",
    )
    enabled: Optional[bool] = Field(
        None, description="Whether the *UtbmsSet* is enabled for the current account."
    )
    etag: Optional[str] = Field(None, description="ETag for the *UtbmsSet*")
    id: Optional[int] = Field(None, description="Unique identifier for the *UtbmsSet*")
    name: Optional[str] = Field(None, description="The name of the *UtbmsSet*")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *UtbmsSet* was last updated (as a ISO-8601 timestamp)",
    )


class Name3(Enum):
    """
    The type of *WebSite* it is
    """

    Work = "Work"
    Personal = "Personal"
    Twitter = "Twitter"
    Facebook = "Facebook"
    LinkedIn = "LinkedIn"
    Instant_Messenger = "Instant Messenger"
    Other = "Other"


class WebSiteBase(BaseModel):
    address: Optional[str] = Field(None, description="The address of the *WebSite*")
    created_at: Optional[str] = Field(
        None, description="The time the *WebSite* was created (as a ISO-8601 timestamp)"
    )
    default_web_site: Optional[bool] = Field(
        None, description="Whether it is the default for this contact"
    )
    etag: Optional[str] = Field(None, description="ETag for the *WebSite*")
    id: Optional[int] = Field(None, description="Unique identifier for the *WebSite*")
    name: Optional[Name3] = Field(None, description="The type of *WebSite* it is")
    updated_at: Optional[str] = Field(
        None,
        description="The time the *WebSite* was last updated (as a ISO-8601 timestamp)",
    )


class Event1(Enum):
    created = "created"
    updated = "updated"
    deleted = "deleted"
    matter_opened = "matter_opened"
    matter_pended = "matter_pended"
    matter_closed = "matter_closed"


class Model(Enum):
    """
    What kind of records the webhook is for
    """

    activity = "activity"
    bill = "bill"
    calendar_entry = "calendar_entry"
    clio_payments_payment = "clio_payments_payment"
    communication = "communication"
    contact = "contact"
    document = "document"
    folder = "folder"
    matter = "matter"
    task = "task"


class Status3(Enum):
    """
    The current status of the webhook.
    """

    pending = "pending"
    enabled = "enabled"
    suspended = "suspended"


class WebhookBase(BaseModel):
    created_at: Optional[str] = Field(
        None, description="The time the *Webhook* was created (as a ISO-8601 timestamp)"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Webhook*")
    events: Optional[List[Event1]] = Field(
        None, description="The events your webhook is subscribed to."
    )
    expires_at: Optional[str] = Field(
        None, description="The time webhook will expire (as a ISO-8601 timestamp)"
    )
    fields: Optional[str] = Field(
        None, description="Fields to be included in the webhook request"
    )
    id: Optional[int] = Field(None, description="Unique identifier for the *Webhook*")
    model: Optional[Model] = Field(
        None, description="What kind of records the webhook is for"
    )
    shared_secret: Optional[str] = Field(
        None, description="A shared secret used to create a signature for the payload"
    )
    status: Optional[Status3] = Field(
        None, description="The current status of the webhook."
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Webhook* was last updated (as a ISO-8601 timestamp)",
    )
    url: Optional[str] = Field(
        None,
        description="The `https` URL to send the data to when the events are triggered",
    )


class ActivityDescription(ActivityDescriptionBase):
    groups: Optional[List[GroupBase]] = Field(None, description="Group")
    rate: Optional[ActivityDescriptionRateBase] = None
    utbms_activity: Optional[UtbmsCodeBase] = None
    utbms_task: Optional[UtbmsCodeBase] = None


class ActivityDescriptionList(BaseModel):
    data: List[ActivityDescription] = Field(
        ..., description="ActivityDescription List Response"
    )


class ActivityDescriptionShow(BaseModel):
    data: ActivityDescription


class ActivityRate(ActivityRateBase):
    group: Optional[GroupBase] = None
    user: Optional[UserBase] = None


class ActivityRateList(BaseModel):
    data: List[ActivityRate] = Field(..., description="ActivityRate List Response")


class ActivityRateShow(BaseModel):
    data: ActivityRate


class Allocation(AllocationBase):
    bill: Optional[BillBase] = None
    contact: Optional[ContactBase] = None
    destination_bank_account: Optional[BankAccountBase] = None
    matter: Optional[MatterBase] = None
    parent: Optional[PolymorphicObjectBase] = None
    source_bank_account: Optional[BankAccountBase] = None


class AllocationList(BaseModel):
    data: List[Allocation] = Field(..., description="Allocation List Response")


class AllocationShow(BaseModel):
    data: Allocation


class BankAccount(BankAccountBase):
    user: Optional[UserBase] = None


class BankAccountList(BaseModel):
    data: List[BankAccount] = Field(..., description="BankAccount List Response")


class BankAccountShow(BaseModel):
    data: BankAccount


class BankTransaction(BankTransactionBase):
    allocation: Optional[AllocationBase] = None
    bank_account: Optional[BankAccountBase] = None
    bill: Optional[BillBase] = None
    client: Optional[ContactBase] = None
    matter: Optional[MatterBase] = None


class BankTransactionList(BaseModel):
    data: List[BankTransaction] = Field(
        ..., description="BankTransaction List Response"
    )


class BankTransactionShow(BaseModel):
    data: BankTransaction


class BankTransfer(BankTransferBase):
    client: Optional[ContactBase] = None
    destination_account: Optional[BankAccountBase] = None
    matter: Optional[MatterBase] = None
    source_account: Optional[BankAccountBase] = None


class BankTransferShow(BaseModel):
    data: BankTransfer


class Bill(BillBase):
    balances: Optional[List[BalanceBase]] = Field(None, description="Balance")
    bill_theme: Optional[BillThemeBase] = None
    billing_setting: Optional[BillingSettingBase] = None
    client: Optional[ContactBase] = None
    client_addresses: Optional[List[AddressBase]] = Field(None, description="Address")
    currency: Optional[CurrencyBase] = None
    destination_account: Optional[BankAccountBase] = None
    discount: Optional[DiscountBase] = None
    group: Optional[GroupBase] = None
    interest: Optional[InterestBase] = None
    legal_aid_uk_bill: Optional[LegalAidUkBillBase] = None
    matter_totals: Optional[List[MatterBalanceBase]] = Field(
        None, description="MatterBalance"
    )
    matters: Optional[List[MatterBase]] = Field(None, description="Matter")
    original_bill: Optional[BillBase] = None
    user: Optional[UserBase] = None


class BillTheme(BillThemeBase):
    pass


class BillThemeList(BaseModel):
    data: List[BillTheme] = Field(..., description="BillTheme List Response")


class BillThemeShow(BaseModel):
    data: BillTheme


class BillList(BaseModel):
    data: List[Bill] = Field(..., description="Bill List Response")


class BillShow(BaseModel):
    data: Bill


class BillableClient(BillableClientBase):
    billable_matters: Optional[List[BillableMatterBase]] = Field(
        None, description="BillableMatter"
    )


class BillableClientList(BaseModel):
    data: List[BillableClient] = Field(..., description="BillableClient List Response")


class BillableMatter(BillableMatterBase):
    client: Optional[ContactBase] = None


class BillableMatterList(BaseModel):
    data: List[BillableMatter] = Field(..., description="BillableMatter List Response")


class BillableMatterShow(BaseModel):
    data: BillableMatter


class BillingSetting(BillingSettingBase):
    pass


class BillingSettingShow(BaseModel):
    data: BillingSetting


class Calendar(CalendarBase):
    pass


class CalendarEntry(CalendarEntryBase):
    attendees: Optional[List[AttendeeBase]] = Field(None, description="Attendee")
    calendar_entry_event_type: Optional[CalendarEntryEventTypeBase] = None
    calendar_owner: Optional[CalendarBase] = None
    calendars: Optional[List[CalendarBase]] = Field(None, description="Calendar")
    conference_meeting: Optional[ConferenceMeetingBase] = None
    external_properties: Optional[List[ExternalPropertyBase]] = Field(
        None, description="ExternalProperty"
    )
    matter: Optional[MatterBase] = None
    matter_docket: Optional[MatterDocketBase] = None
    parent_calendar_entry: Optional[CalendarEntryBase] = None
    reminders: Optional[List[ReminderBase]] = Field(None, description="Reminder")
    time_entries: Optional[List[ActivityBase]] = Field(None, description="Activity")


class CalendarEntryEventType(CalendarEntryEventTypeBase):
    pass


class CalendarEntryList(BaseModel):
    data: List[CalendarEntry] = Field(..., description="CalendarEntry List Response")


class CalendarEntryShow(BaseModel):
    data: CalendarEntry


class CalendarVisibility(CalendarVisibilityBase):
    pass


class CalendarVisibilityList(BaseModel):
    data: List[CalendarVisibility] = Field(
        ..., description="CalendarVisibility List Response"
    )


class CalendarVisibilityShow(BaseModel):
    data: CalendarVisibility


class CalendarList(BaseModel):
    data: List[Calendar] = Field(..., description="Calendar List Response")


class CalendarShow(BaseModel):
    data: Calendar


class ClioPaymentsLink(ClioPaymentsLinkBase):
    bank_account: Optional[BankAccountBase] = None
    bill: Optional[BillBase] = None
    clio_payments_payment: Optional[ClioPaymentsPaymentBase] = None
    contact: Optional[ContactBase] = None
    destination_account: Optional[BankAccountBase] = None
    destination_contact: Optional[ContactBase] = None


class ClioPaymentsLinkList(BaseModel):
    data: List[ClioPaymentsLink] = Field(
        ..., description="ClioPaymentsLink List Response"
    )


class ClioPaymentsLinkShow(BaseModel):
    data: ClioPaymentsLink


class ClioPaymentsPayment(ClioPaymentsPaymentBase):
    allocations: Optional[List[AllocationBase]] = Field(None, description="Allocation")
    bank_transaction: Optional[BankTransactionBase] = None
    bills: Optional[List[BillBase]] = Field(None, description="Bill")
    clio_payments_link: Optional[ClioPaymentsLinkBase] = None
    contact: Optional[ContactBase] = None
    destination_account: Optional[BankAccountBase] = None
    matters: Optional[List[MatterBase]] = Field(None, description="Matter")
    user: Optional[UserBase] = None


class ClioPaymentsPaymentList(BaseModel):
    data: List[ClioPaymentsPayment] = Field(
        ..., description="ClioPaymentsPayment List Response"
    )


class ClioPaymentsPaymentShow(BaseModel):
    data: ClioPaymentsPayment


class Comment(CommentBase):
    creator: Optional[UserBase] = None
    document_version: Optional[DocumentVersionBase] = None


class CommentList(BaseModel):
    data: List[Comment] = Field(..., description="Comment List Response")


class CommentShow(BaseModel):
    data: Comment


class Data(ContactBase, InstantMessengerBase):
    pass


class ContactShow(BaseModel):
    data: Data


class ConversationMembership(ConversationMembershipBase):
    member: Optional[UnredactedParticipantBase] = None


class ConversationMessage(ConversationMessageBase):
    conversation: Optional[ConversationBase] = None
    document: Optional[DocumentBase] = None
    receivers: Optional[List[UnredactedParticipantBase]] = Field(
        None, description="UnredactedParticipant"
    )
    sender: Optional[UnredactedParticipantBase] = None


class ConversationMessageList(BaseModel):
    data: List[ConversationMessage] = Field(
        ..., description="ConversationMessage List Response"
    )


class ConversationMessageShow(BaseModel):
    data: ConversationMessage


class CreditMemo(CreditMemoBase):
    allocations: Optional[List[AllocationBase]] = Field(None, description="Allocation")
    contact: Optional[ContactBase] = None
    user: Optional[UserBase] = None


class CreditMemoList(BaseModel):
    data: List[CreditMemo] = Field(..., description="CreditMemo List Response")


class CreditMemoShow(BaseModel):
    data: CreditMemo


class Currency(CurrencyBase):
    pass


class CurrencyList(BaseModel):
    data: List[Currency] = Field(..., description="Currency List Response")


class CustomAction(CustomActionBase):
    pass


class CustomActionList(BaseModel):
    data: List[CustomAction] = Field(..., description="CustomAction List Response")


class CustomActionShow(BaseModel):
    data: CustomAction


class CustomFieldSet(CustomFieldSetBase):
    custom_fields: Optional[List[CustomFieldBase]] = Field(
        None, description="CustomField"
    )


class CustomFieldSetList(BaseModel):
    data: List[CustomFieldSet] = Field(..., description="CustomFieldSet List Response")


class CustomFieldSetShow(BaseModel):
    data: CustomFieldSet


class Damage(DamageBase):
    matter: Optional[MatterBase] = None


class DamageList(BaseModel):
    data: List[Damage] = Field(..., description="Damage List Response")


class DamageShow(BaseModel):
    data: Damage


class DocumentArchive(DocumentArchiveBase):
    pass


class DocumentArchiveShow(BaseModel):
    data: DocumentArchive


class DocumentAutomation(DocumentAutomationBase):
    document_template: Optional[DocumentTemplateBase] = None
    documents: Optional[List[DocumentBase]] = Field(None, description="Document")
    matter: Optional[MatterBase] = None


class DocumentAutomationList(BaseModel):
    data: List[DocumentAutomation] = Field(
        ..., description="DocumentAutomation List Response"
    )


class DocumentAutomationShow(BaseModel):
    data: DocumentAutomation


class DocumentCategory(DocumentCategoryBase):
    pass


class DocumentCategoryList(BaseModel):
    data: List[DocumentCategory] = Field(
        ..., description="DocumentCategory List Response"
    )


class DocumentCategoryShow(BaseModel):
    data: DocumentCategory


class DocumentTemplate(DocumentTemplateBase):
    document_category: Optional[DocumentCategoryBase] = None
    last_modified_by: Optional[UserBase] = None


class DocumentTemplateList(BaseModel):
    data: List[DocumentTemplate] = Field(
        ..., description="DocumentTemplate List Response"
    )


class DocumentTemplateShow(BaseModel):
    data: DocumentTemplate


class Error(BaseModel):
    error: ErrorDetail


class EventMetrics(EventMetricsBase):
    pass


class EventMetricsShow(BaseModel):
    data: EventMetrics


class ExpenseCategory(ExpenseCategoryBase):
    groups: Optional[List[GroupBase]] = Field(None, description="Group")
    utbms_code: Optional[UtbmsCodeBase] = None


class ExpenseCategoryList(BaseModel):
    data: List[ExpenseCategory] = Field(
        ..., description="ExpenseCategory List Response"
    )


class ExpenseCategoryShow(BaseModel):
    data: ExpenseCategory


class Folder(FolderBase):
    contact: Optional[ContactBase] = None
    creator: Optional[ClioCreatorBase] = None
    document_category: Optional[DocumentCategoryBase] = None
    external_properties: Optional[List[ExternalPropertyBase]] = Field(
        None, description="ExternalProperty"
    )
    group: Optional[GroupBase] = None
    latest_document_version: Optional[DocumentVersionBase] = None
    matter: Optional[MatterBase] = None
    parent: Optional[LinkedFolderBase] = None


class FolderList(BaseModel):
    data: List[Folder] = Field(..., description="Folder List Response")


class FolderShow(BaseModel):
    data: Folder


class Grant(GrantBase):
    grant_funding_source: Optional[GrantFundingSourceBase] = None


class GrantFundingSource(GrantFundingSourceBase):
    grants: Optional[List[GrantBase]] = Field(None, description="Grant")


class GrantFundingSourceList(BaseModel):
    data: List[GrantFundingSource] = Field(
        ..., description="GrantFundingSource List Response"
    )


class GrantFundingSourceShow(BaseModel):
    data: GrantFundingSource


class GrantList(BaseModel):
    data: List[Grant] = Field(..., description="Grant List Response")


class GrantShow(BaseModel):
    data: Grant


class Group(GroupBase):
    users: Optional[List[UserBase]] = Field(None, description="User")


class GroupList(BaseModel):
    data: List[Group] = Field(..., description="Group List Response")


class GroupShow(BaseModel):
    data: Group


class InterestCharge(InterestChargeBase):
    balances: Optional[List[BalanceBase]] = Field(None, description="Balance")
    bill: Optional[BillBase] = None
    matters: Optional[List[MatterBase]] = Field(None, description="Matter")


class InterestChargeList(BaseModel):
    data: List[InterestCharge] = Field(..., description="InterestCharge List Response")


class Item(ItemBase):
    contact: Optional[ContactBase] = None
    creator: Optional[ClioCreatorBase] = None
    document_category: Optional[DocumentCategoryBase] = None
    external_properties: Optional[List[ExternalPropertyBase]] = Field(
        None, description="ExternalProperty"
    )
    group: Optional[GroupBase] = None
    latest_document_version: Optional[DocumentVersionBase] = None
    matter: Optional[MatterBase] = None
    parent: Optional[LinkedFolderBase] = None


class ItemList(BaseModel):
    data: List[Item] = Field(..., description="Item List Response")


class Jurisdiction(JurisdictionBase):
    service_types: Optional[List[ServiceTypeBase]] = Field(
        None, description="ServiceType"
    )


class JurisdictionList(BaseModel):
    data: List[Jurisdiction] = Field(..., description="Jurisdiction List Response")


class JurisdictionShow(BaseModel):
    data: Jurisdiction


class JurisdictionsToTrigger(JurisdictionsToTriggerBase):
    pass


class JurisdictionsToTriggerList(BaseModel):
    data: List[JurisdictionsToTrigger] = Field(
        ..., description="JurisdictionsToTrigger List Response"
    )


class JurisdictionsToTriggerShow(BaseModel):
    data: JurisdictionsToTrigger


class LaukCivilCertificatedRate(LaukCivilCertificatedRateBase):
    pass


class LaukCivilCertificatedRateList(BaseModel):
    data: List[LaukCivilCertificatedRate] = Field(
        ..., description="LaukCivilCertificatedRate List Response"
    )


class LaukCivilControlledRate(LaukCivilControlledRateBase):
    pass


class LaukCivilControlledRateList(BaseModel):
    data: List[LaukCivilControlledRate] = Field(
        ..., description="LaukCivilControlledRate List Response"
    )


class LaukCriminalControlledRate(LaukCriminalControlledRateBase):
    pass


class LaukCriminalControlledRateList(BaseModel):
    data: List[LaukCriminalControlledRate] = Field(
        ..., description="LaukCriminalControlledRate List Response"
    )


class LaukExpenseCategory(LaukExpenseCategoryBase):
    pass


class LaukExpenseCategoryList(BaseModel):
    data: List[LaukExpenseCategory] = Field(
        ..., description="LaukExpenseCategory List Response"
    )


class LineItem(LineItemBase):
    activity: Optional[ActivityBase] = None
    bill: Optional[BillBase] = None
    discount: Optional[DiscountBase] = None
    included_line_item_totals: Optional[LineItemTotalsBase] = None
    matter: Optional[MatterBase] = None
    user: Optional[UserBase] = None


class LineItemList(BaseModel):
    data: List[LineItem] = Field(..., description="LineItem List Response")


class LineItemShow(BaseModel):
    data: LineItem


class LogEntry(LogEntryBase):
    item: Optional[PolymorphicObjectBase] = None
    user: Optional[UserBase] = None


class LogEntryList(BaseModel):
    data: List[LogEntry] = Field(..., description="LogEntry List Response")


class MatterBillRecipient(MatterBillRecipientBase):
    recipient: Optional[ContactBase] = None


class MatterContacts(MatterContactsBase):
    addresses: Optional[List[AddressBase]] = Field(None, description="Address")
    avatar: Optional[AvatarBase] = None
    company: Optional[ContactBase] = None
    custom_field_values: Optional[List[CustomFieldValueBase]] = Field(
        None, description="CustomFieldValue"
    )
    email_addresses: Optional[List[EmailAddressBase]] = Field(
        None, description="EmailAddress"
    )
    phone_numbers: Optional[List[PhoneNumberBase]] = Field(
        None, description="PhoneNumber"
    )
    primary_address: Optional[AddressBase] = None
    primary_web_site: Optional[WebSiteBase] = None
    relationship: Optional[RelationshipBase] = None
    secondary_address: Optional[AddressBase] = None
    secondary_web_site: Optional[WebSiteBase] = None
    web_sites: Optional[List[WebSiteBase]] = Field(None, description="WebSite")


class MatterContactsList(BaseModel):
    data: List[MatterContacts] = Field(..., description="MatterContacts List Response")


class MatterDocket(MatterDocketBase):
    calendar_entries: Optional[List[CalendarEntryBase]] = Field(
        None, description="CalendarEntry"
    )
    jurisdiction: Optional[JurisdictionBase] = None
    matter: Optional[MatterBase] = None
    service_type: Optional[ServiceTypeBase] = None
    trigger: Optional[JurisdictionsToTriggerBase] = None


class MatterDocketList(BaseModel):
    data: List[MatterDocket] = Field(..., description="MatterDocket List Response")


class MatterDocketShow(BaseModel):
    data: MatterDocket


class MatterStage(MatterStageBase):
    pass


class MatterStageList(BaseModel):
    data: List[MatterStage] = Field(..., description="MatterStage List Response")


class MedicalBill(MedicalBillBase):
    liens: Optional[List[LienBase]] = Field(None, description="Lien")
    matter: Optional[MatterBase] = None


class MedicalBillShow(BaseModel):
    data: MedicalBill


class MedicalRecord(MedicalRecordBase):
    matter: Optional[MatterBase] = None


class MedicalRecordShow(BaseModel):
    data: MedicalRecord


class MedicalRecordsRequest(MedicalRecordsRequestBase):
    matter: Optional[MatterBase] = None
    medical_bills: Optional[List[MedicalBillBase]] = Field(
        None, description="MedicalBill"
    )
    medical_provider: Optional[ContactBase] = None
    medical_records: Optional[List[MedicalRecordBase]] = Field(
        None, description="MedicalRecord"
    )


class MedicalRecordsRequestList(BaseModel):
    data: List[MedicalRecordsRequest] = Field(
        ..., description="MedicalRecordsRequest List Response"
    )


class MedicalRecordsRequestShow(BaseModel):
    data: MedicalRecordsRequest


class Multipart(MultipartBase):
    put_headers: Optional[List[MultipartHeaderBase]] = Field(
        None, description="MultipartHeader"
    )


class MyEvent(MyEventBase):
    event: Optional[EventBase] = None


class MyEventList(BaseModel):
    data: List[MyEvent] = Field(..., description="MyEvent List Response")


class MyEventShow(BaseModel):
    data: MyEvent


class Note(NoteBase):
    pass


class NoteList(BaseModel):
    data: List[Note] = Field(..., description="Note List Response")


class NoteShow(BaseModel):
    data: Note


class OutstandingClientBalance(OutstandingClientBalanceBase):
    contact: Optional[ContactBase] = None
    currency: Optional[CurrencyBase] = None
    outstanding_bills: Optional[List[BillBase]] = Field(None, description="Bill")


class OutstandingClientBalanceList(BaseModel):
    data: List[OutstandingClientBalance] = Field(
        ..., description="OutstandingClientBalance List Response"
    )


class Participant(ParticipantBase):
    avatar: Optional[AvatarBase] = None


class PicklistOption(PicklistOptionBase):
    pass


class PolymorphicCustomRate(PolymorphicCustomRateBase):
    activity_description: Optional[PolymorphicCustomRateActivityDescriptionBase] = None
    group: Optional[PolymorphicCustomRateGroupBase] = None
    user: Optional[PolymorphicCustomRateUserBase] = None


class PracticeArea(PracticeAreaBase):
    pass


class PracticeAreaList(BaseModel):
    data: List[PracticeArea] = Field(..., description="PracticeArea List Response")


class PracticeAreaShow(BaseModel):
    data: PracticeArea


class RelatedContacts(RelatedContactsBase):
    addresses: Optional[List[AddressBase]] = Field(None, description="Address")
    avatar: Optional[AvatarBase] = None
    company: Optional[ContactBase] = None
    custom_field_values: Optional[List[CustomFieldValueBase]] = Field(
        None, description="CustomFieldValue"
    )
    email_addresses: Optional[List[EmailAddressBase]] = Field(
        None, description="EmailAddress"
    )
    phone_numbers: Optional[List[PhoneNumberBase]] = Field(
        None, description="PhoneNumber"
    )
    primary_address: Optional[AddressBase] = None
    primary_web_site: Optional[WebSiteBase] = None
    relationship: Optional[RelationshipBase] = None
    secondary_address: Optional[AddressBase] = None
    secondary_web_site: Optional[WebSiteBase] = None
    web_sites: Optional[List[WebSiteBase]] = Field(None, description="WebSite")


class RelatedContactsList(BaseModel):
    data: List[RelatedContacts] = Field(
        ..., description="RelatedContacts List Response"
    )


class Relationship(RelationshipBase):
    contact: Optional[ContactBase] = None
    matter: Optional[MatterBase] = None


class RelationshipList(BaseModel):
    data: List[Relationship] = Field(..., description="Relationship List Response")


class RelationshipShow(BaseModel):
    data: Relationship


class Reminder(ReminderBase):
    notification_method: Optional[NotificationMethodBase] = None
    subject: Optional[PolymorphicObjectBase] = None


class ReminderList(BaseModel):
    data: List[Reminder] = Field(..., description="Reminder List Response")


class ReminderShow(BaseModel):
    data: Reminder


class Report(ReportBase):
    pass


class ReportPreset(ReportPresetBase):
    report_schedule: Optional[ReportScheduleBase] = None


class ReportPresetList(BaseModel):
    data: List[ReportPreset] = Field(..., description="ReportPreset List Response")


class ReportPresetShow(BaseModel):
    data: ReportPreset


class ReportSchedule(ReportScheduleBase):
    pass


class ReportScheduleList(BaseModel):
    data: List[ReportSchedule] = Field(..., description="ReportSchedule List Response")


class ReportScheduleShow(BaseModel):
    data: ReportSchedule


class ReportList(BaseModel):
    data: List[Report] = Field(..., description="Report List Response")


class ReportShow(BaseModel):
    data: Report


class ServiceType(ServiceTypeBase):
    pass


class ServiceTypeList(BaseModel):
    data: List[ServiceType] = Field(..., description="ServiceType List Response")


class ServiceTypeShow(BaseModel):
    data: ServiceType


class TaskTemplate(TaskTemplateBase):
    assignee: Optional[UserBase] = None
    cascading_source: Optional[CascadingTaskTemplateBase] = None
    reminder_templates: Optional[List[ReminderTemplateBase]] = Field(
        None, description="ReminderTemplate"
    )
    task_template_list: Optional[TaskTemplateListBase] = None
    task_type: Optional[TaskTypeBase] = None
    template_creator: Optional[UserBase] = None


class TaskTemplateList(TaskTemplateListBase):
    creator: Optional[UserBase] = None
    practice_area: Optional[PracticeAreaBase] = None


class TaskTemplateListList(BaseModel):
    data: List[TaskTemplateList] = Field(
        ..., description="TaskTemplateList List Response"
    )


class TaskTemplateListShow(BaseModel):
    data: TaskTemplateList


class TaskTemplateShow(BaseModel):
    data: TaskTemplate


class TaskType(TaskTypeBase):
    pass


class TaskTypeList(BaseModel):
    data: List[TaskType] = Field(..., description="TaskType List Response")


class TaskTypeShow(BaseModel):
    data: TaskType


class TextSnippet(TextSnippetBase):
    pass


class TextSnippetList(BaseModel):
    data: List[TextSnippet] = Field(..., description="TextSnippet List Response")


class TextSnippetShow(BaseModel):
    data: TextSnippet


class Timer(TimerBase):
    activity: Optional[ActivityBase] = None


class TimerShow(BaseModel):
    data: Timer


class TrustLineItem(TrustLineItemBase):
    bill: Optional[BillBase] = None
    client: Optional[ContactBase] = None
    matter: Optional[MatterBase] = None


class TrustLineItemList(BaseModel):
    data: List[TrustLineItem] = Field(..., description="TrustLineItem List Response")


class TrustLineItemShow(BaseModel):
    data: TrustLineItem


class TrustRequest(TrustRequestBase):
    pass


class TrustRequestShow(BaseModel):
    data: TrustRequest


class UtbmsCode(UtbmsCodeBase):
    pass


class UtbmsCodeList(BaseModel):
    data: List[UtbmsCode] = Field(..., description="UtbmsCode List Response")


class UtbmsCodeShow(BaseModel):
    data: UtbmsCode


class UtbmsSet(UtbmsSetBase):
    pass


class UtbmsSetList(BaseModel):
    data: List[UtbmsSet] = Field(..., description="UtbmsSet List Response")


class Webhook(WebhookBase):
    pass


class WebhookList(BaseModel):
    data: List[Webhook] = Field(..., description="Webhook List Response")


class WebhookShow(BaseModel):
    data: Webhook


class CustomFieldExtended(CustomFieldBase):
    picklist_options: Optional[List[PicklistOption]] = None


class Communication(CommunicationBase):
    communication_eml_file: Optional[CommunicationEmlFileBase] = None
    documents: Optional[List[DocumentBase]] = Field(None, description="Document")
    external_properties: Optional[List[ExternalPropertyBase]] = Field(
        None, description="ExternalProperty"
    )
    matter: Optional[MatterBase] = None
    notification_event_subscribers: Optional[List[NotificationEventSubscriberBase]] = (
        Field(None, description="NotificationEventSubscriber")
    )
    receivers: Optional[List[Participant]] = Field(None, description="Participant")
    senders: Optional[List[Participant]] = Field(None, description="Participant")
    time_entries: Optional[List[ActivityBase]] = Field(None, description="Activity")
    user: Optional[UserBase] = None


class CommunicationList(BaseModel):
    data: List[Communication] = Field(..., description="Communication List Response")


class CommunicationShow(BaseModel):
    data: Communication


class Contact(ContactBase, ContactShow):
    pass


class ContactList(BaseModel):
    data: List[Contact] = Field(..., description="Contact List Response")


class Conversation(ConversationBase):
    documents: Optional[List[DocumentBase]] = Field(None, description="Document")
    first_message: Optional[ConversationMessageBase] = None
    last_message: Optional[ConversationMessageBase] = None
    matter: Optional[MatterBase] = None
    memberships: Optional[List[ConversationMembership]] = Field(
        None, description="ConversationMembership"
    )
    messages: Optional[List[ConversationMessageBase]] = Field(
        None, description="ConversationMessage"
    )


class ConversationList(BaseModel):
    data: List[Conversation] = Field(..., description="Conversation List Response")


class ConversationShow(BaseModel):
    data: Conversation


class CustomField(CustomFieldBase, CustomFieldExtended):
    pass


class CustomFieldList(BaseModel):
    data: List[CustomField] = Field(..., description="CustomField List Response")


class CustomFieldShow(BaseModel):
    data: CustomField


class DocumentVersion(DocumentVersionBase):
    creator: Optional[ClioCreatorBase] = None
    multiparts: Optional[List[Multipart]] = Field(None, description="Multipart")
    put_headers: Optional[List[MultipartHeaderBase]] = Field(
        None, description="MultipartHeader"
    )


class DocumentVersionList(BaseModel):
    data: List[DocumentVersion] = Field(
        ..., description="DocumentVersion List Response"
    )


class MatterCustomRate(MatterCustomRateBase):
    rates: Optional[List[PolymorphicCustomRate]] = Field(
        None, description="PolymorphicCustomRate"
    )


class CustomFieldValueExtended(CustomFieldValueBase):
    custom_field: Optional[CustomField] = None
    picklist_option: Optional[PicklistOption] = None
    matter: Optional[Matter] = None
    contact: Optional[Contact] = None


class CustomFieldValue(CustomFieldValueBase, CustomFieldValueExtended):
    pass


class ActivityList(BaseModel):
    data: List[Activity] = Field(..., description="Activity List Response")


class ActivityShow(BaseModel):
    data: Activity


class ClientShow(BaseModel):
    data: Client


class DocumentList(BaseModel):
    data: List[Document] = Field(..., description="Document List Response")


class DocumentShow(BaseModel):
    data: Document


class MatterList(BaseModel):
    data: List[Matter1] = Field(..., description="Matter List Response")


class MatterShow(BaseModel):
    data: Matter1


class TaskList(BaseModel):
    data: List[Task] = Field(..., description="Task List Response")


class TaskShow(BaseModel):
    data: Task = Field(..., description="Task")


class UserList(BaseModel):
    data: List[User] = Field(..., description="User List Response")


class UserShow(BaseModel):
    data: User = Field(..., description="User")


class Activity(ActivityBase, ActivityShow):
    pass


class Client(ClientBase, ClientShow):
    pass


class Document(DocumentBase, DocumentShow):
    pass


class Matter1(MatterBase, MatterShow):
    pass


class Task(TaskBase, TaskShow):
    pass


class User(UserBase, UserShow):
    pass


ActivityList.update_forward_refs()
ActivityShow.update_forward_refs()
ClientShow.update_forward_refs()
DocumentList.update_forward_refs()
DocumentShow.update_forward_refs()
MatterList.update_forward_refs()
MatterShow.update_forward_refs()
TaskList.update_forward_refs()
TaskShow.update_forward_refs()
UserList.update_forward_refs()
UserShow.update_forward_refs()
Activity.update_forward_refs()
Client.update_forward_refs()
Document.update_forward_refs()
Matter1.update_forward_refs()
Task.update_forward_refs()
User.update_forward_refs()
