# generated by datamodel-codegen:
#   filename:  openapi_sdk.yaml

from __future__ import annotations

from decimal import Decimal
from enum import Enum
from typing import Any
from typing import Dict
from typing import List
from typing import Optional
from clio_clients.models.priority.priority1 import Priority1
from clio_clients.models.status.status2 import Status2
from pydantic import BaseModel
from pydantic import Field


class TaskBase(BaseModel):
    completed_at: Optional[str] = Field(
        None, description="The time the *Task* was completed (as a ISO-8601 timestamp)"
    )
    created_at: Optional[str] = Field(
        None, description="The time the *Task* was created (as a ISO-8601 timestamp)"
    )
    description: Optional[str] = Field(
        None, description="A detailed description of the *Task*"
    )
    due_at: Optional[str] = Field(
        None, description="The date the *Task* is due (as a ISO-8601 date)"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Task*")
    id: Optional[int] = Field(None, description="Unique identifier for the *Task*")
    name: Optional[str] = Field(None, description="The name of the *Task*")
    notify_completion: Optional[bool] = Field(
        None, description="Whether to notify the assigner of the task's completion"
    )
    permission: Optional[str] = Field(None, description="The permission of the *Task*")
    priority: Optional[Priority1] = Field(
        None, description="The priority of the *Task*"
    )
    status: Optional[Status2] = Field(
        None,
        description="Status of the *Task*. (Note that users without advanced tasks can only have either complete or pending)",
    )
    statute_of_limitations: Optional[bool] = Field(
        None, description="Whether the task is a statute of limitations"
    )
    time_entries_count: Optional[int] = Field(
        None, description="The number of time entries associated with this task"
    )
    time_estimated: Optional[int] = Field(
        None, description="Time the *Task* should take to complete"
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Task* was last updated (as a ISO-8601 timestamp)",
    )
