# generated by datamodel-codegen:
#   filename:  openapi_sdk.yaml

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel, Field


class AllocationBase(BaseModel):
    amount: Optional[float] = Field(
        None, description="The total amount of money that the user has allocated"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the *Allocation* was created (as a ISO-8601 timestamp)",
    )
    date: Optional[str] = Field(
        None, description="The date the allocation was applied (as a ISO-8601 date)"
    )
    description: Optional[str] = Field(
        None,
        description="The description from the associated Credit Memo (if applicable)",
    )
    destroyable: Optional[bool] = Field(
        None, description="Whether the record can be deleted or not"
    )
    etag: Optional[str] = Field(None, description="ETag for the *Allocation*")
    has_online_payment: Optional[bool] = Field(
        None,
        description="Whether this allocation is associated with an online payment or not",
    )
    id: Optional[int] = Field(
        None, description="Unique identifier for the *Allocation*"
    )
    interest: Optional[bool] = Field(
        None, description="Whether the allocation is applied to interest amount"
    )
    payment_type: Optional[str] = Field(
        None,
        description="A string indicating whether the payment is a card or an eCheck payment.",
    )
    updated_at: Optional[str] = Field(
        None,
        description="The time the *Allocation* was last updated (as a ISO-8601 timestamp)",
    )
    voided_at: Optional[str] = Field(
        None, description="Time the *Allocation* was voided (as a ISO-8601 timestamp)"
    )
